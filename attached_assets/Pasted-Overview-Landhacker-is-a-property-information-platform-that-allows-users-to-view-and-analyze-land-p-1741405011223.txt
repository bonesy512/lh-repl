Overview
Landhacker is a property information platform that allows users to view and analyze land parcels on a map, with data overlays showing property details, estimated values, and geographic information. The app is optimized for mobile use with a dark-themed interface.

Core Functionality Step-by-Step
1. Property Search & Visualization
Search Functionality: Users can search for properties by address using the SearchBar component
Map Interface: The main interface is a MapView component that displays properties on an interactive map
Map Styles: Users can toggle between "custom" and "satellite" map styles
Property Selection: Clicking a property on the map selects it and displays its details
2. Property Data Display
Property Card: When a property is selected, a PropertyCard displays basic property information
Detailed View: The PropertyDialog shows comprehensive property details including:
Parcel data (size, legal description)
Owner information
Assessed values (land value, improvement value, market value)
Distance to nearest city
Price estimates from various sources
3. Measurement Tools
Distance Measurement: Users can measure distances between points on the map
Area Measurement: Users can measure the area of a polygon drawn on the map
Measurement Units: Users can toggle between metric and imperial units
Interactive Drawing: The app uses a drag-based interaction system for creating measurements
Save Measurements: Completed measurements can be saved and displayed on the map
4. Price Estimation
Web Scraping: The app scrapes property listings from multiple real estate websites (Trulia, LandWatch, etc.)
Comparable Properties: Shows similar properties with their per-acre prices
AI Price Prediction: Uses an AI model to predict the property value based on comparable properties
Confidence Score: Provides a confidence rating for each price prediction
5. User Management
Firebase Authentication: Users can create accounts and log in
User Profiles: Stores user information in Firestore
Saved Properties: Users can save properties to view later
Credit System: Users have credits they can spend on price estimations
6. Payment Processing
Stripe Integration: Handles payments for credits and subscriptions
Checkout Flow: Users can purchase credits through a Stripe checkout
Webhook Handling: Processes Stripe webhook events to update user credits
Technical Flow
1. Frontend Architecture
React Components: UI built with React and TypeScript
Zustand Store: Global state management using Zustand
Mapbox Integration: Map visualization using Mapbox GL JS
Shadcn UI: Component library for consistent design
2. Backend Services
FastAPI Endpoints: Process requests for property data, distances, price estimates
Firecrawl Integration: Scrapes real estate websites for property prices
OpenAI Integration: Analyzes property data to generate price predictions
Google Maps API: Calculates distances between properties and cities
3. Data Flow
User searches for a property or clicks on the map
Frontend sends request to backend API
Backend fetches data from external sources (Firecrawl, Exa API)
Property data is processed and returned to frontend
Frontend displays property details in the UI
If saved, property data is stored in Firestore
4. User Session Flow
User authenticates through Firebase
User profile is loaded from Firestore
Credit balance is checked for premium features
User interactions and saved properties are synchronized with Firestore
Credits are deducted when using price estimation features
Key Technologies
Frontend: React, TypeScript, Mapbox GL, Zustand, Shadcn UI
Backend: Python, FastAPI
Database: Firebase Firestore
Authentication: Firebase Auth
External APIs: Firecrawl, Exa API, OpenAI, Google Maps API
Payments: Stripe
This comprehensive property analysis platform combines real-time data, AI-driven insights, and interactive mapping to help users evaluate land parcels with detailed information right at their fingertips.
To enable Sign in with Google using Firebase Authentication in your Next.js app, you'll need to set up Firebase Authentication with the Google provider and integrate it into your app's login flow. Below are the steps and code to help you make this work.

Steps to Implement Sign-In with Google
Set Up Firebase in Your Project If you haven't already done so, you'll need to set up Firebase in your Next.js project.

Go to Firebase Console, create a new project, and enable Google authentication.

Install Firebase SDK:

bash
Copy
Edit
npm install firebase
Initialize Firebase in your app by creating a firebase.js file:

javascript
Copy
Edit
// lib/firebase.js
import { initializeApp } from 'firebase/app';
import { getAuth, GoogleAuthProvider } from 'firebase/auth';

const firebaseConfig = {
  apiKey: 'your-api-key',
  authDomain: 'your-auth-domain',
  projectId: 'your-project-id',
  storageBucket: 'your-storage-bucket',
  messagingSenderId: 'your-messaging-sender-id',
  appId: 'your-app-id',
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const googleProvider = new GoogleAuthProvider();

export { auth, googleProvider };
Create the Google Sign-In Button Next, youâ€™ll need to create a Google Sign-In button that triggers the authentication flow when clicked.

Here's an example of how you can implement the Google Sign-In button in your login page:

javascript
Copy
Edit
// pages/login.js
import { useRouter } from 'next/router';
import { auth, googleProvider } from '../lib/firebase';
import { signInWithPopup } from 'firebase/auth';

export default function LoginPage() {
  const router = useRouter();

  const handleGoogleSignIn = async () => {
    try {
      const result = await signInWithPopup(auth, googleProvider);
      const user = result.user;
      console.log('Google User:', user);
      // Redirect to dashboard after successful login
      router.push('/dashboard');
    } catch (error) {
      console.error('Error signing in with Google:', error.message);
    }
  };

  return (
    <div>
      <button onClick={handleGoogleSignIn} className="google-signin-button">
        Sign in with Google
      </button>
    </div>
  );
}
Google Sign-In Flow: signInWithPopup(auth, googleProvider) opens a popup for the user to authenticate with their Google account.
After successful authentication, we use router.push('/dashboard') to navigate to the dashboard page.
Redirect User After Sign-In On the dashboard or home page, you want to ensure that only authenticated users can access it. If not authenticated, they should be redirected back to the login page.

Here's how you can implement a check for authentication on the dashboard page:

javascript
Copy
Edit
// pages/dashboard.js
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { getAuth } from 'firebase/auth';

export default function DashboardPage() {
  const router = useRouter();
  const auth = getAuth();
  const user = auth.currentUser;

  useEffect(() => {
    if (!user) {
      // If the user is not authenticated, redirect to the login page
      router.push('/login');
    }
  }, [user, router]);

  if (!user) {
    // Optionally show loading spinner or similar while waiting for the auth state
    return <div>Loading...</div>;
  }

  return <div>Welcome to your Dashboard, {user.displayName}</div>;
}
Handling Authentication State Optionally, you can create a custom hook or use an onAuthStateChanged listener to handle authentication state and trigger redirects accordingly. Here's how you can implement it globally for the user state:

javascript
Copy
Edit
// lib/useAuth.js
import { useEffect, useState } from 'react';
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { useRouter } from 'next/router';

export default function useAuth() {
  const [user, setUser] = useState(null);
  const router = useRouter();

  useEffect(() => {
    const auth = getAuth();
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      if (currentUser) {
        setUser(currentUser);
      } else {
        setUser(null);
        router.push('/login');
      }
    });

    return () => unsubscribe();
  }, [router]);

  return user;
}
Then, use the useAuth hook inside your pages or components to get the current user:

javascript
Copy
Edit
// pages/dashboard.js
import useAuth from '../lib/useAuth';

export default function DashboardPage() {
  const user = useAuth();

  if (!user) {
    return <div>Loading...</div>;
  }

  return <div>Welcome to the Dashboard, {user.displayName}</div>;
}
Final Checklist:
Ensure Google authentication is enabled in the Firebase console.
Verify that the Firebase credentials in firebase.js are correct.
Ensure the signInWithPopup function is properly integrated and the user is redirected after successful sign-in.
Add a check for user authentication before showing protected pages like the dashboard.
Handle errors during the sign-in process and display helpful error messages.
Let me know if you encounter any issues, and I can help further debug!
Directory structure:
└── bonesy512-landhacker-databutton-backup/
    ├── README.md
    ├── Makefile
    ├── backend/
    │   ├── README.md
    │   ├── install.sh
    │   ├── main.py
    │   ├── pyproject.toml
    │   ├── requirements.txt
    │   ├── routers.json
    │   ├── run.sh
    │   ├── uv.lock
    │   ├── .gitignore
    │   ├── .python-version
    │   ├── app/
    │   │   ├── env.py
    │   │   ├── .gitkeep
    │   │   ├── apis/
    │   │   │   ├── __init__.py
    │   │   │   ├── other_data/
    │   │   │   │   └── __init__.py
    │   │   │   ├── payments/
    │   │   │   │   └── __init__.py
    │   │   │   ├── property/
    │   │   │   │   └── __init__.py
    │   │   │   └── scrape/
    │   │   │       └── __init__.py
    │   │   └── auth/
    │   │       ├── __init__.py
    │   │       └── user.py
    │   └── databutton_app/
    │       └── mw/
    │           ├── __init__.py
    │           └── auth_mw.py
    └── frontend/
        ├── README.md
        ├── components.json
        ├── head.html
        ├── index.html
        ├── install.sh
        ├── package.json
        ├── postcss.config.js
        ├── run.sh
        ├── tailwind.config.js
        ├── tsconfig.json
        ├── tsconfig.node.json
        ├── vite.config.ts
        ├── yarn.lock
        ├── .env
        ├── .gitignore
        ├── .pnp.cjs
        ├── .pnp.loader.mjs
        ├── public/
        │   └── .gitkeep
        ├── src/
        │   ├── AppWrapper.tsx
        │   ├── constants.ts
        │   ├── fonts.json
        │   ├── index.css
        │   ├── main.tsx
        │   ├── router.tsx
        │   ├── user-routes.tsx
        │   ├── vite-env.d.ts
        │   ├── app/
        │   │   ├── index.ts
        │   │   ├── .dockerignore
        │   │   ├── .gitkeep
        │   │   └── auth/
        │   │       ├── SignInOrUpForm.tsx
        │   │       ├── UserGuard.tsx
        │   │       ├── auth.ts
        │   │       ├── config.ts
        │   │       ├── firebase.ts
        │   │       ├── index.ts
        │   │       └── useCurrentUser.ts
        │   ├── brain/
        │   │   ├── Brain.ts
        │   │   ├── BrainRoute.ts
        │   │   ├── data-contracts.ts
        │   │   ├── http-client.ts
        │   │   ├── index.ts
        │   │   └── .gitkeep
        │   ├── components/
        │   │   ├── GeneratePrice.tsx
        │   │   ├── Map.tsx
        │   │   ├── MeasurementCard.tsx
        │   │   ├── MeasurementControls.tsx
        │   │   ├── MeasurementLayer.tsx
        │   │   ├── PropertyCard.tsx
        │   │   ├── PropertyDialog.tsx
        │   │   ├── SearchBar.tsx
        │   │   ├── UserDialog.tsx
        │   │   └── .gitkeep
        │   ├── constants/
        │   │   └── default-theme.ts
        │   ├── extensions/
        │   │   ├── .gitkeep
        │   │   └── shadcn/
        │   │       ├── components/
        │   │       │   ├── accordion.tsx
        │   │       │   ├── alert-dialog.tsx
        │   │       │   ├── alert.tsx
        │   │       │   ├── aspect-ratio.tsx
        │   │       │   ├── avatar.tsx
        │   │       │   ├── badge.tsx
        │   │       │   ├── breadcrumb.tsx
        │   │       │   ├── button.tsx
        │   │       │   ├── calendar.tsx
        │   │       │   ├── card.tsx
        │   │       │   ├── carousel.tsx
        │   │       │   ├── chart.tsx
        │   │       │   ├── checkbox.tsx
        │   │       │   ├── collapsible.tsx
        │   │       │   ├── command.tsx
        │   │       │   ├── context-menu.tsx
        │   │       │   ├── dialog.tsx
        │   │       │   ├── drawer.tsx
        │   │       │   ├── dropdown-menu.tsx
        │   │       │   ├── form.tsx
        │   │       │   ├── hover-card.tsx
        │   │       │   ├── input-otp.tsx
        │   │       │   ├── input.tsx
        │   │       │   ├── label.tsx
        │   │       │   ├── menubar.tsx
        │   │       │   ├── navigation-menu.tsx
        │   │       │   ├── pagination.tsx
        │   │       │   ├── popover.tsx
        │   │       │   ├── progress.tsx
        │   │       │   ├── radio-group.tsx
        │   │       │   ├── resizable.tsx
        │   │       │   ├── scroll-area.tsx
        │   │       │   ├── select.tsx
        │   │       │   ├── separator.tsx
        │   │       │   ├── sheet.tsx
        │   │       │   ├── skeleton.tsx
        │   │       │   ├── slider.tsx
        │   │       │   ├── sonner.tsx
        │   │       │   ├── switch.tsx
        │   │       │   ├── table.tsx
        │   │       │   ├── tabs.tsx
        │   │       │   ├── textarea.tsx
        │   │       │   ├── toast.tsx
        │   │       │   ├── toaster.tsx
        │   │       │   ├── toggle-group.tsx
        │   │       │   ├── toggle.tsx
        │   │       │   └── tooltip.tsx
        │   │       └── hooks/
        │   │           ├── use-theme.ts
        │   │           └── use-toast.ts
        │   ├── internal-components/
        │   │   ├── Head.tsx
        │   │   └── ThemeProvider.tsx
        │   ├── lib/
        │   │   └── utils.ts
        │   ├── pages/
        │   │   ├── App.tsx
        │   │   ├── Login.tsx
        │   │   ├── Logout.tsx
        │   │   ├── NotFoundPage.tsx
        │   │   ├── SomethingWentWrongPage.tsx
        │   │   ├── brain.ts
        │   │   └── .gitkeep
        │   ├── prod-components/
        │   │   ├── ProdAppWrapper.tsx
        │   │   ├── ProdErrorPage.tsx
        │   │   └── SuspenseWrapper.tsx
        │   └── utils/
        │       ├── cn.ts
        │       ├── firebase.ts
        │       ├── queue.ts
        │       ├── store.tsx
        │       └── .gitkeep
        └── .yarn/
            └── install-state.gz

================================================
File: README.md
================================================
# Databutton app

This project consists of a FastAPI backend server and a React + TypeScript frontend application exported from Databutton.

## Stack

- React+Typescript frontend with `yarn` as package manager.
- Python FastAPI server with `uv` as package manager.

## Quickstart

1. Install dependencies:

```bash
make
```

2. Start the backend and frontend servers in separate terminals:

```bash
make run-backend
make run-frontend
```

## Gotchas

The backend server runs on port 8000 and the frontend development server runs on port 5173. The frontend Vite server proxies API requests to the backend on port 8000.

Visit <http://localhost:5173> to view the application.


================================================
File: Makefile
================================================
install-backend:
	chmod +x backend/install.sh
	chmod +x backend/run.sh
	cd backend && ./install.sh

install-frontend:
	chmod +x frontend/install.sh
	chmod +x frontend/run.sh
	cd frontend && ./install.sh

install: install-backend install-frontend

run-backend:
	cd backend && ./run.sh

run-frontend:
	cd frontend && ./run.sh

.DEFAULT_GOAL := install


================================================
File: backend/install.sh
================================================
#!/bin/bash

uv venv
source ./venv/bin/activate
uv pip install -r requirements.txt


================================================
File: backend/main.py
================================================
import os
import pathlib
import json
import dotenv
from fastapi import FastAPI, APIRouter, Depends

dotenv.load_dotenv()

from databutton_app.mw.auth_mw import AuthConfig, get_authorized_user


def get_router_config() -> dict:
    try:
        # Note: This file is not available to the agent
        cfg = json.loads(open("routers.json").read())
    except:
        return False
    return cfg


def is_auth_disabled(router_config: dict, name: str) -> bool:
    return router_config["routers"][name]["disableAuth"]


def import_api_routers() -> APIRouter:
    """Create top level router including all user defined endpoints."""
    routes = APIRouter(prefix="/routes")

    router_config = get_router_config()

    src_path = pathlib.Path(__file__).parent

    # Import API routers from "src/app/apis/*/__init__.py"
    apis_path = src_path / "app" / "apis"

    api_names = [
        p.relative_to(apis_path).parent.as_posix()
        for p in apis_path.glob("*/__init__.py")
    ]

    api_module_prefix = "app.apis."

    for name in api_names:
        print(f"Importing API: {name}")
        try:
            api_module = __import__(api_module_prefix + name, fromlist=[name])
            api_router = getattr(api_module, "router", None)
            if isinstance(api_router, APIRouter):
                routes.include_router(
                    api_router,
                    dependencies=(
                        []
                        if is_auth_disabled(router_config, name)
                        else [Depends(get_authorized_user)]
                    ),
                )
        except Exception as e:
            print(e)
            continue

    print(routes.routes)

    return routes


def get_firebase_config() -> dict | None:
    extensions = os.environ.get("DATABUTTON_EXTENSIONS", "[]")
    extensions = json.loads(extensions)

    for ext in extensions:
        if ext["name"] == "firebase-auth":
            return ext["config"]["firebaseConfig"]

    return None


def create_app() -> FastAPI:
    """Create the app. This is called by uvicorn with the factory option to construct the app object."""
    app = FastAPI()
    app.include_router(import_api_routers())

    for route in app.routes:
        if hasattr(route, "methods"):
            for method in route.methods:
                print(f"{method} {route.path}")

    firebase_config = get_firebase_config()

    if firebase_config is None:
        print("No firebase config found")
        app.state.auth_config = None
    else:
        print("Firebase config found")
        auth_config = {
            "jwks_url": "https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com",
            "audience": firebase_config["projectId"],
            "header": "authorization",
        }

        app.state.auth_config = AuthConfig(**auth_config)

    return app


app = create_app()


================================================
File: backend/pyproject.toml
================================================
[project]
name = "apis"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "fastapi>=0.115.8",
    "uvicorn>=0.34.0",
]


================================================
File: backend/requirements.txt
================================================
# Workspace version: 1.42.49
databutton==0.38.34
ipykernel==6.29.5
fastapi==0.111.0
uvicorn[standard]==0.29.0
python-multipart==0.0.9
openai
beautifulsoup4
requests
shapely
exa_py
tiktoken
firebase-admin
stripe 
firecrawl-py

================================================
File: backend/routers.json
================================================
{"routers":{"other_data":{"name":"other_data","version":"2024-12-28T23:07:04","disableAuth":false},"payments":{"name":"payments","version":"2025-02-26T06:54:52","disableAuth":true},"property":{"name":"property","version":"2025-02-20T07:06:01","disableAuth":false},"scrape":{"name":"scrape","version":"2025-02-25T07:01:03","disableAuth":false}}}

================================================
File: backend/run.sh
================================================
#!/bin/bash

source .venv/bin/activate

uvicorn main:app --reload 


================================================
File: backend/uv.lock
================================================
version = 1
requires-python = ">=3.13"

[[package]]
name = "annotated-types"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ee/67/531ea369ba64dcff5ec9c3402f9f51bf748cec26dde048a2f973a4eea7f5/annotated_types-0.7.0.tar.gz", hash = "sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89", size = 16081 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/b6/6307fbef88d9b5ee7421e68d78a9f162e0da4900bc5f5793f6d3d0e34fb8/annotated_types-0.7.0-py3-none-any.whl", hash = "sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53", size = 13643 },
]

[[package]]
name = "anyio"
version = "4.8.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "idna" },
    { name = "sniffio" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a3/73/199a98fc2dae33535d6b8e8e6ec01f8c1d76c9adb096c6b7d64823038cde/anyio-4.8.0.tar.gz", hash = "sha256:1d9fe889df5212298c0c0723fa20479d1b94883a2df44bd3897aa91083316f7a", size = 181126 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/46/eb/e7f063ad1fec6b3178a3cd82d1a3c4de82cccf283fc42746168188e1cdd5/anyio-4.8.0-py3-none-any.whl", hash = "sha256:b5011f270ab5eb0abf13385f851315585cc37ef330dd88e27ec3d34d651fd47a", size = 96041 },
]

[[package]]
name = "apis"
version = "0.1.0"
source = { virtual = "." }
dependencies = [
    { name = "fastapi" },
    { name = "uvicorn" },
]

[package.metadata]
requires-dist = [
    { name = "fastapi", specifier = ">=0.115.8" },
    { name = "uvicorn", specifier = ">=0.34.0" },
]

[[package]]
name = "click"
version = "8.1.8"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "platform_system == 'Windows'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b9/2e/0090cbf739cee7d23781ad4b89a9894a41538e4fcf4c31dcdd705b78eb8b/click-8.1.8.tar.gz", hash = "sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a", size = 226593 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/d4/7ebdbd03970677812aac39c869717059dbb71a4cfc033ca6e5221787892c/click-8.1.8-py3-none-any.whl", hash = "sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2", size = 98188 },
]

[[package]]
name = "colorama"
version = "0.4.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d8/53/6f443c9a4a8358a93a6792e2acffb9d9d5cb0a5cfd8802644b7b1c9a02e4/colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44", size = 27697 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6", size = 25335 },
]

[[package]]
name = "fastapi"
version = "0.115.8"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pydantic" },
    { name = "starlette" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a2/b2/5a5dc4affdb6661dea100324e19a7721d5dc524b464fe8e366c093fd7d87/fastapi-0.115.8.tar.gz", hash = "sha256:0ce9111231720190473e222cdf0f07f7206ad7e53ea02beb1d2dc36e2f0741e9", size = 295403 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8f/7d/2d6ce181d7a5f51dedb8c06206cbf0ec026a99bf145edd309f9e17c3282f/fastapi-0.115.8-py3-none-any.whl", hash = "sha256:753a96dd7e036b34eeef8babdfcfe3f28ff79648f86551eb36bfc1b0bf4a8cbf", size = 94814 },
]

[[package]]
name = "h11"
version = "0.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f5/38/3af3d3633a34a3316095b39c8e8fb4853a28a536e55d347bd8d8e9a14b03/h11-0.14.0.tar.gz", hash = "sha256:8f19fbbe99e72420ff35c00b27a34cb9937e902a8b810e2c88300c6f0a3b699d", size = 100418 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/95/04/ff642e65ad6b90db43e668d70ffb6736436c7ce41fcc549f4e9472234127/h11-0.14.0-py3-none-any.whl", hash = "sha256:e3fe4ac4b851c468cc8363d500db52c2ead036020723024a109d37346efaa761", size = 58259 },
]

[[package]]
name = "idna"
version = "3.10"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9", size = 190490 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3", size = 70442 },
]

[[package]]
name = "pydantic"
version = "2.10.6"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "annotated-types" },
    { name = "pydantic-core" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b7/ae/d5220c5c52b158b1de7ca89fc5edb72f304a70a4c540c84c8844bf4008de/pydantic-2.10.6.tar.gz", hash = "sha256:ca5daa827cce33de7a42be142548b0096bf05a7e7b365aebfa5f8eeec7128236", size = 761681 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f4/3c/8cc1cc84deffa6e25d2d0c688ebb80635dfdbf1dbea3e30c541c8cf4d860/pydantic-2.10.6-py3-none-any.whl", hash = "sha256:427d664bf0b8a2b34ff5dd0f5a18df00591adcee7198fbd71981054cef37b584", size = 431696 },
]

[[package]]
name = "pydantic-core"
version = "2.27.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fc/01/f3e5ac5e7c25833db5eb555f7b7ab24cd6f8c322d3a3ad2d67a952dc0abc/pydantic_core-2.27.2.tar.gz", hash = "sha256:eb026e5a4c1fee05726072337ff51d1efb6f59090b7da90d30ea58625b1ffb39", size = 413443 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/41/b1/9bc383f48f8002f99104e3acff6cba1231b29ef76cfa45d1506a5cad1f84/pydantic_core-2.27.2-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:7d14bd329640e63852364c306f4d23eb744e0f8193148d4044dd3dacdaacbd8b", size = 1892709 },
    { url = "https://files.pythonhosted.org/packages/10/6c/e62b8657b834f3eb2961b49ec8e301eb99946245e70bf42c8817350cbefc/pydantic_core-2.27.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:82f91663004eb8ed30ff478d77c4d1179b3563df6cdb15c0817cd1cdaf34d154", size = 1811273 },
    { url = "https://files.pythonhosted.org/packages/ba/15/52cfe49c8c986e081b863b102d6b859d9defc63446b642ccbbb3742bf371/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:71b24c7d61131bb83df10cc7e687433609963a944ccf45190cfc21e0887b08c9", size = 1823027 },
    { url = "https://files.pythonhosted.org/packages/b1/1c/b6f402cfc18ec0024120602bdbcebc7bdd5b856528c013bd4d13865ca473/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:fa8e459d4954f608fa26116118bb67f56b93b209c39b008277ace29937453dc9", size = 1868888 },
    { url = "https://files.pythonhosted.org/packages/bd/7b/8cb75b66ac37bc2975a3b7de99f3c6f355fcc4d89820b61dffa8f1e81677/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:ce8918cbebc8da707ba805b7fd0b382816858728ae7fe19a942080c24e5b7cd1", size = 2037738 },
    { url = "https://files.pythonhosted.org/packages/c8/f1/786d8fe78970a06f61df22cba58e365ce304bf9b9f46cc71c8c424e0c334/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:eda3f5c2a021bbc5d976107bb302e0131351c2ba54343f8a496dc8783d3d3a6a", size = 2685138 },
    { url = "https://files.pythonhosted.org/packages/a6/74/d12b2cd841d8724dc8ffb13fc5cef86566a53ed358103150209ecd5d1999/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bd8086fa684c4775c27f03f062cbb9eaa6e17f064307e86b21b9e0abc9c0f02e", size = 1997025 },
    { url = "https://files.pythonhosted.org/packages/a0/6e/940bcd631bc4d9a06c9539b51f070b66e8f370ed0933f392db6ff350d873/pydantic_core-2.27.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:8d9b3388db186ba0c099a6d20f0604a44eabdeef1777ddd94786cdae158729e4", size = 2004633 },
    { url = "https://files.pythonhosted.org/packages/50/cc/a46b34f1708d82498c227d5d80ce615b2dd502ddcfd8376fc14a36655af1/pydantic_core-2.27.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:7a66efda2387de898c8f38c0cf7f14fca0b51a8ef0b24bfea5849f1b3c95af27", size = 1999404 },
    { url = "https://files.pythonhosted.org/packages/ca/2d/c365cfa930ed23bc58c41463bae347d1005537dc8db79e998af8ba28d35e/pydantic_core-2.27.2-cp313-cp313-musllinux_1_1_armv7l.whl", hash = "sha256:18a101c168e4e092ab40dbc2503bdc0f62010e95d292b27827871dc85450d7ee", size = 2130130 },
    { url = "https://files.pythonhosted.org/packages/f4/d7/eb64d015c350b7cdb371145b54d96c919d4db516817f31cd1c650cae3b21/pydantic_core-2.27.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:ba5dd002f88b78a4215ed2f8ddbdf85e8513382820ba15ad5ad8955ce0ca19a1", size = 2157946 },
    { url = "https://files.pythonhosted.org/packages/a4/99/bddde3ddde76c03b65dfd5a66ab436c4e58ffc42927d4ff1198ffbf96f5f/pydantic_core-2.27.2-cp313-cp313-win32.whl", hash = "sha256:1ebaf1d0481914d004a573394f4be3a7616334be70261007e47c2a6fe7e50130", size = 1834387 },
    { url = "https://files.pythonhosted.org/packages/71/47/82b5e846e01b26ac6f1893d3c5f9f3a2eb6ba79be26eef0b759b4fe72946/pydantic_core-2.27.2-cp313-cp313-win_amd64.whl", hash = "sha256:953101387ecf2f5652883208769a79e48db18c6df442568a0b5ccd8c2723abee", size = 1990453 },
    { url = "https://files.pythonhosted.org/packages/51/b2/b2b50d5ecf21acf870190ae5d093602d95f66c9c31f9d5de6062eb329ad1/pydantic_core-2.27.2-cp313-cp313-win_arm64.whl", hash = "sha256:ac4dbfd1691affb8f48c2c13241a2e3b60ff23247cbcf981759c768b6633cf8b", size = 1885186 },
]

[[package]]
name = "sniffio"
version = "1.3.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a2/87/a6771e1546d97e7e041b6ae58d80074f81b7d5121207425c964ddf5cfdbd/sniffio-1.3.1.tar.gz", hash = "sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc", size = 20372 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e9/44/75a9c9421471a6c4805dbf2356f7c181a29c1879239abab1ea2cc8f38b40/sniffio-1.3.1-py3-none-any.whl", hash = "sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2", size = 10235 },
]

[[package]]
name = "starlette"
version = "0.45.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ff/fb/2984a686808b89a6781526129a4b51266f678b2d2b97ab2d325e56116df8/starlette-0.45.3.tar.gz", hash = "sha256:2cbcba2a75806f8a41c722141486f37c28e30a0921c5f6fe4346cb0dcee1302f", size = 2574076 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d9/61/f2b52e107b1fc8944b33ef56bf6ac4ebbe16d91b94d2b87ce013bf63fb84/starlette-0.45.3-py3-none-any.whl", hash = "sha256:dfb6d332576f136ec740296c7e8bb8c8a7125044e7c6da30744718880cdd059d", size = 71507 },
]

[[package]]
name = "typing-extensions"
version = "4.12.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/df/db/f35a00659bc03fec321ba8bce9420de607a1d37f8342eee1863174c69557/typing_extensions-4.12.2.tar.gz", hash = "sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8", size = 85321 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/26/9f/ad63fc0248c5379346306f8668cda6e2e2e9c95e01216d2b8ffd9ff037d0/typing_extensions-4.12.2-py3-none-any.whl", hash = "sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d", size = 37438 },
]

[[package]]
name = "uvicorn"
version = "0.34.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "click" },
    { name = "h11" },
]
sdist = { url = "https://files.pythonhosted.org/packages/4b/4d/938bd85e5bf2edeec766267a5015ad969730bb91e31b44021dfe8b22df6c/uvicorn-0.34.0.tar.gz", hash = "sha256:404051050cd7e905de2c9a7e61790943440b3416f49cb409f965d9dcd0fa73e9", size = 76568 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/61/14/33a3a1352cfa71812a3a21e8c9bfb83f60b0011f5e36f2b1399d51928209/uvicorn-0.34.0-py3-none-any.whl", hash = "sha256:023dc038422502fa28a09c7a30bf2b6991512da7dcdb8fd35fe57cfc154126f4", size = 62315 },
]


================================================
File: backend/.gitignore
================================================
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
.env
.venv
env/
venv/
ENV/

# IDE
.idea/
.vscode/
*.swp
*.swo

# FastAPI
.pytest_cache/
coverage.xml
.coverage

# Uvicorn
*.log


================================================
File: backend/.python-version
================================================
3.13


================================================
File: backend/app/env.py
================================================
"""Usage:

from app.env import Mode, mode

if mode == Mode.PROD:
    print("Running in deployed service")
else:
    print("Running in development workspace")
"""

import os
from enum import Enum


class Mode(str, Enum):
    DEV = "development"
    PROD = "production"


mode = Mode.PROD if os.environ.get("DATABUTTON_SERVICE_TYPE") == "prodx" else Mode.DEV

__all__ = [
    "Mode",
    "mode",
]


================================================
File: backend/app/apis/other_data/__init__.py
================================================

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
import requests
import databutton as db

# Router for endpoints
router = APIRouter()

class DistanceRequest(BaseModel):
    origins: str  # Format: "lat,long"
    destination: str  # City name

class DistanceResponse(BaseModel):
    distance_text: str
    distance_value: int  # in meters
    duration_text: str
    duration_value: int  # in seconds

@router.post("/distance-to-city")
def get_distance_to_city(body: DistanceRequest) -> DistanceResponse:
    """Get the distance and duration to a city using Google Maps Distance Matrix API"""
    try:
        # Get API key from secrets
        api_key = db.secrets.get("GOOGLE_MAPS_API_KEY")
        
        # Construct the URL
        url = f"https://maps.googleapis.com/maps/api/distancematrix/json"
        params = {
            "origins": body.origins,
            "destinations": body.destination,
            "units": "imperial",
            "key": api_key
        }
        
        # Make the request
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        
        # Check for API errors
        if data.get("status") != "OK":
            raise HTTPException(
                status_code=400,
                detail=f"Google Maps API error: {data.get('status', 'Unknown error')}"
            )
            
        # Get the first route
        elements = data.get("rows", [{}])[0].get("elements", [{}])[0]
        
        if elements.get("status") != "OK":
            raise HTTPException(
                status_code=400,
                detail=f"Route error: {elements.get('status', 'Unknown error')}"
            )
        
        # Extract distance and duration
        distance = elements.get("distance", {})
        duration = elements.get("duration", {})
        
        return DistanceResponse(
            distance_text=distance.get("text", "N/A"),
            distance_value=distance.get("value", 0),
            duration_text=duration.get("text", "N/A"),
            duration_value=duration.get("value", 0)
        )
        
    except requests.RequestException as e:
        raise HTTPException(status_code=500, detail=f"Failed to fetch distance: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


================================================
File: backend/app/apis/payments/__init__.py
================================================
from fastapi import APIRouter, Request, HTTPException, Depends
from pydantic import BaseModel
import stripe
import firebase_admin
from firebase_admin import credentials, firestore
import databutton as db
import json
from typing import TypedDict, Literal
from datetime import datetime
from app.auth import AuthorizedUser
import json as json_module

# Set this to True to use test environment, False to use production
USE_TEST_ENVIRONMENT = True
import os
from app.env import Mode, mode

class ProductConfig(TypedDict):
    credits: int
    type: Literal["monthly", "one_time"]

# Test environment configuration
TEST_PRODUCT_CONFIG: dict[str, ProductConfig] = {
    # One-time token packages
    "prod_RqKeQvg6CVuBSo": {"credits": 2500, "type": "one_time"},  # 2500 tokens ($100)
    "prod_RqKezDydjuWJrR": {"credits": 1250, "type": "one_time"},  # 1250 tokens ($50)
    "prod_RqKg3XTH0optXm": {"credits": 500, "type": "one_time"},   # 500 tokens ($25)
    
    # Monthly subscription - does not add credits, just provides access
    "prod_RqKcmjpSSjIarh": {"credits": 0, "type": "monthly"}      # Monthly subscription ($20)
}

# Test price IDs for reference
TEST_PRICE_IDS = {
    "MONTHLY": "price_1QwdxMQD0tmjQB7AzDZquNZO",   # Monthly subscription
    "TOKENS_500": "price_1Qwe11QD0tmjQB7AQWs7M9nE",  # 500 tokens
    "TOKENS_1250": "price_1QwdzOQD0tmjQB7Ap9CLBHBn", # 1250 tokens
    "TOKENS_2500": "price_1Qwe0UQD0tmjQB7ALfloZuTq"  # 2500 tokens
}

# Production environment configuration
PRODUCTION_PRODUCT_CONFIG: dict[str, ProductConfig] = {
    # One-time token packages
    "prod_RqGzTjzgVbi40o": {"credits": 2500, "type": "one_time"},  # 2500 tokens ($100)
    "prod_RqGypl9K3FTbT7": {"credits": 1250, "type": "one_time"},  # 1250 tokens ($50)
    "prod_RqGynF7E8a22AB": {"credits": 500, "type": "one_time"},   # 500 tokens ($25)
    
    # Monthly subscription - does not add credits, just provides access
    "prod_RqGngOCXUsp0yI": {"credits": 0, "type": "monthly"}      # Monthly subscription ($20)
}

# Production price IDs for reference
PRODUCTION_PRICE_IDS = {
    "MONTHLY": "price_1QwaGDGPQrpE7XHPsBGjwnax",   # Monthly subscription
    "TOKENS_500": "price_1QwaQCGPQrpE7XHPaWlhn5eN",  # 500 tokens
    "TOKENS_1250": "price_1QwaQmGPQrpE7XHPf7bW4yF7", # 1250 tokens
    "TOKENS_2500": "price_1QwaR9GPQrpE7XHPGB5Hn9GU"  # 2500 tokens
}

# Set the product configuration based on the environment flag
PRODUCT_CONFIG: dict[str, ProductConfig] = TEST_PRODUCT_CONFIG if USE_TEST_ENVIRONMENT else PRODUCTION_PRODUCT_CONFIG
PRICE_IDS = TEST_PRICE_IDS if USE_TEST_ENVIRONMENT else PRODUCTION_PRICE_IDS

# Initialize Firebase if not already initialized
try:
    firebase_admin.get_app()
except ValueError:
    cred = credentials.Certificate(json.loads(db.secrets.get("FIREBASE_ADMIN_KEY")))
    firebase_admin.initialize_app(cred)

router = APIRouter()
db_client = firestore.client()

@router.get("/test-stripe-connection")
def test_stripe_connection():
    """Test the Stripe connection and list products"""
    try:
        # Attempt to retrieve account info
        account = stripe.Account.retrieve()
        
        # List all products
        products = stripe.Product.list(limit=100, active=True)
        
        # Format product data for readable output
        formatted_products = []
        for product in products.data:
            # Get prices for this product
            prices = stripe.Price.list(product=product.id, active=True)
            price_data = [{
                "id": price.id,
                "currency": price.currency,
                "unit_amount": price.unit_amount / 100 if price.unit_amount else 0,
                "recurring": price.recurring is not None,
                "interval": price.recurring.interval if price.recurring else None,
                "active": price.active
            } for price in prices.data]
            
            # Format product with its prices
            formatted_product = {
                "id": product.id,
                "name": product.name,
                "active": product.active,
                "description": product.description,
                "prices": price_data
            }
            formatted_products.append(formatted_product)
        
        # Return account and product information
        return {
            "status": "success",
            "account": {
                "id": account.id,
                "business_profile": account.business_profile,
                "email": account.email,
                "charges_enabled": account.charges_enabled,
                "details_submitted": account.details_submitted,
                "payouts_enabled": account.payouts_enabled
            },
            "products": formatted_products,
            "stripe_version": stripe.api_version,
            "stripe_environment": "TEST" if USE_TEST_ENVIRONMENT else "PRODUCTION",
            "product_config": {
                product_id: config for product_id, config in PRODUCT_CONFIG.items()
            },
            "price_ids": PRICE_IDS
        }
    except Exception as e:
        error_details = str(e)
        return {
            "status": "error",
            "message": "Error connecting to Stripe",
            "error": error_details,
            "stripe_key_prefix": db.secrets.get("STRIPE_SECRET_KEY")[:8] + "..."
        }

# Initialize Stripe with the appropriate API key based on environment flag
stripe.api_key = db.secrets.get("STRIPE_TEST_SECRET_KEY") if USE_TEST_ENVIRONMENT else db.secrets.get("STRIPE_SECRET_KEY")

def get_product_config(price_id: str) -> ProductConfig | None:
    """Get product configuration from a price ID"""
    try:
        price = stripe.Price.retrieve(price_id)
        return PRODUCT_CONFIG.get(price.product)
    except Exception as e:
        print(f"Error getting product config for price {price_id}: {str(e)}")
        return None

class CreateCheckoutSession(BaseModel):
    price_id: str
    success_url: str
    cancel_url: str

@router.post("/create-checkout")
def create_checkout_session(body: CreateCheckoutSession, user: AuthorizedUser):
    """Create a Stripe Checkout session"""
    try:
        # Get or create customer
        user_ref = db_client.collection("users").document(user.sub)
        user_data = user_ref.get().to_dict() or {}
        customer_id = user_data.get("stripeCustomerId")
        customer_email = user_data.get("email")
        
        if not customer_id:
            # Create customer with name and email if available
            customer_name = user_data.get("displayMame")
            customer_params = {
                "metadata": {"firebase_uid": user.sub},
                "email": customer_email
            }
            if customer_name:
                customer_params["name"] = customer_name
                
            customer = stripe.Customer.create(**customer_params)
            customer_id = customer.id
            
            # Update user document with stripe customer id
            try:
                user_ref.set({"stripeCustomerId": customer_id}, merge=True)
                # Verify the write was successful
                updated_user = user_ref.get().to_dict()
                if updated_user.get("stripeCustomerId") != customer_id:
                    print(f"Failed to update stripeCustomerId for user {user.sub}")
                    raise HTTPException(status_code=500, detail="Failed to update user data")
            except Exception as e:
                print(f"Error updating user with stripe customer id: {str(e)}")
                raise HTTPException(status_code=500, detail="Failed to update user data")

        # Get product config to determine if it's a subscription
        product_config = get_product_config(body.price_id)
        if not product_config:
            raise HTTPException(status_code=400, detail="Invalid product")
            
        # Set mode based on product type
        mode = "subscription" if product_config["type"] == "monthly" else "payment"
        
        # Create checkout session
        session = stripe.checkout.Session.create(
            customer_email=customer_email,
            payment_method_types=["card"],
            line_items=[{
                "price": body.price_id,
                "quantity": 1,
            }],
            mode=mode,
            success_url=body.success_url,
            cancel_url=body.cancel_url,
            client_reference_id=user.sub,
            metadata={
                "firebase_uid": user.sub,
                "product_type": product_config["type"]
            }
        )

        return {"session_id": session.id}
        
    except Exception as e:
        print(f"Error creating checkout session: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/webhook")
async def stripe_webhook(request: Request):
    # Get the webhook data
    print("hihi")
    payload = await request.body()
    sig_header = request.headers.get("stripe-signature")
    
    try:
        webhook_secret = db.secrets.get("STRIPE_TEST_WEBHOOK_SECRET") if USE_TEST_ENVIRONMENT else db.secrets.get("STRIPE_WEBHOOK_SECRET")
        event = stripe.Webhook.construct_event(
            payload, sig_header, webhook_secret
        )
        print(event)  
    except ValueError as e:
        raise HTTPException(status_code=400, detail="Invalid payload") from e
        
    # Handle the event
    if event["type"] == "customer.subscription.created":
        subscription = event["data"]["object"]
        result = handle_subscription_created(subscription)
        return result
    elif event["type"] == "customer.subscription.updated":
        subscription = event["data"]["object"]
        result = handle_subscription_updated(subscription)
        return result
    elif event["type"] == "customer.subscription.deleted":
        subscription = event["data"]["object"]
        result = handle_subscription_deleted(subscription)
        return result
    elif event["type"] == "checkout.session.completed":
        session = event["data"]["object"]
        
        # Skip if this is a subscription purchase as it will be handled by subscription.created
        if session.get("mode") == "subscription":
            return {"status": "success", "message": "Skipping subscription purchase, will be handled by subscription webhook"}
        
        # Get customer ID and customer email from session
        customer_id = session.get("customer")
        customer_email = session.get("customer_details", {}).get("email")
        session_id = session.get("id")
        
        if not customer_email:
            print("No customer email found in session")
            return {"status": "error", "message": "No customer email found"}
        
        # Get user document by email
        user_query = db_client.collection("users").where(
            "email", "==", customer_email
        ).limit(1).get()
        
        if not user_query:
            print(f"No user found for email {customer_email}")
            return {"status": "error", "message": "User not found"}
        
        user_doc = user_query[0]
        user_ref = user_doc.reference
        
        # Update user with Stripe customer ID if not already set
        if not user_doc.get("stripeCustomerId"):
            user_ref.set({"stripeCustomerId": customer_id}, merge=True)
        
        # Get line items from session
        line_items = stripe.checkout.Session.list_line_items(session_id)
        
        # Calculate total credits for one-time purchases only
        total_credits = 0
        
        for item in line_items.data:
            product_config = get_product_config(item.price.id)
            if product_config and product_config["type"] == "one_time":
                total_credits += product_config["credits"]
        
        if total_credits > 0:
            # Get current user data
            user_data = user_ref.get().to_dict() or {}
            current_credits = user_data.get("credits", 0)

            # Update user credits
            updated_data = {
                "credits": current_credits + total_credits,
                "stripeCustomerId": customer_id,
                "lastActive": datetime.utcnow().isoformat(),
            }
            
            user_ref.set(updated_data, merge=True)
            
            print(f"Updated credits for user {user_doc.id}: +{total_credits} credits (one-time purchase)")
            
        return {
            "status": "success",
            "message": f"Updated credits for user {user_doc.id}: +{total_credits} credits (one-time purchase)"
        }
    return {"status": "success", "credits_added": 0}

def handle_subscription_created(subscription):
    """Handle a new subscription being created"""
    # Get customer ID and email from subscription
    customer_id = subscription.get("customer")
    if not customer_id:
        print("No customer ID found in subscription")
        return {"status": "error", "credits_added": 0, "message": "No customer ID found"}

    # Get customer email from Stripe
    try:
        stripe_customer = stripe.Customer.retrieve(customer_id)
        customer_email = stripe_customer.get("email")
    except Exception as e:
        print(f"Error retrieving Stripe customer: {str(e)}")
        return {"status": "error", "credits_added": 0, "message": "Failed to retrieve customer details"}

    if not customer_email:
        print("No customer email found in Stripe")
        return {"status": "error", "message": "No customer email found"}

    # Get user document by email
    user_query = db_client.collection("users").where(
        "email", "==", customer_email
    ).limit(1).get()

    if not user_query:
        print(f"No user found for email {customer_email}")
        return {"status": "error", "message": "User not found"}

    user_doc = user_query[0]
    user_ref = user_doc.reference
    user_data = user_doc.to_dict()

    # Update user with Stripe customer ID if not already set
    if not user_doc.get("stripeCustomerId"):
        user_ref.set({"stripeCustomerId": customer_id}, merge=True)

    # Get subscription details
    subscription_item = subscription.get("items", {}).get("data", [])[0]
    if not subscription_item:
        return {"status": "error", "credits_added": 0, "message": "No subscription items found"}
        
    price_id = subscription_item.get("price", {}).get("id")
    if not price_id:
        return {"status": "error", "credits_added": 0, "message": "No price ID found"}
        
    # Get product config
    product_config = get_product_config(price_id)
    if not product_config:
        return {"status": "error", "credits_added": 0, "message": "No product config found"}
        
    total_credits = product_config["credits"]

    # Store subscription details with enhanced information
    subscription_data = {
        # Subscription Core Details
        "subscriptionId": subscription.get("id"),
        "status": subscription.get("status"),
        "currentPeriodStart": datetime.fromtimestamp(subscription.get("current_period_start", 0)).isoformat(),
        "currentPeriodEnd": datetime.fromtimestamp(subscription.get("current_period_end", 0)).isoformat(),
        "cancelAtPeriodEnd": subscription.get("cancel_at_period_end", False),
        "creditsPerPeriod": total_credits,
        
        # Price and Product Details
        "priceId": price_id,
        "productId": subscription_item.get("price", {}).get("product"),
        "amount": subscription_item.get("price", {}).get("unit_amount", 0) / 100,
        "currency": subscription_item.get("price", {}).get("currency", "usd"),
        
        # User Details
        "userId": user_doc.id,
        "userEmail": user_data.get("email"),
        "userName": user_data.get("name"),
        
        # Stripe Customer Details
        "stripeCustomerId": customer_id,
        "stripeCustomerEmail": customer_email,
        "stripeCustomerName": stripe_customer.get("name"),
        
        # Metadata and Timestamps
        "createdAt": datetime.utcnow().isoformat(),
        "updatedAt": datetime.utcnow().isoformat(),
        "lastBillingDate": datetime.fromtimestamp(subscription.get("current_period_start", 0)).isoformat(),
        "nextBillingDate": datetime.fromtimestamp(subscription.get("current_period_end", 0)).isoformat(),
        
        # Subscription Config
        "isActive": True,
        "type": "monthly",
    }
    
    print(f"Creating subscription document with data: {subscription_data}")
    
    # Update subscription collection
    db_client.collection("subscriptions").document(user_doc.id).set(subscription_data)
    
    # Update user data - subscription doesn't add credits, only sets status
    updated_data = {
        "subscriptionStatus": "active",
        "subscriptionTier": "monthly",
        "lastActive": datetime.utcnow().isoformat(),
    }
    
    user_ref.set(updated_data, merge=True)
    
    return {
        "status": "success",
        "credits_added": total_credits,
        "message": f"Created subscription for user {user_doc.id}: added {total_credits} credits"
    }

def handle_subscription_updated(subscription):
    """Handle a subscription being updated"""
    # Get customer ID and email from subscription
    customer_id = subscription.get("customer")
    if not customer_id:
        print("No customer ID found in subscription")
        return {"status": "error", "credits_added": 0, "message": "No customer ID found"}

    # Get customer email from Stripe
    try:
        stripe_customer = stripe.Customer.retrieve(customer_id)
        customer_email = stripe_customer.get("email")
    except Exception as e:
        print(f"Error retrieving Stripe customer: {str(e)}")
        return {"status": "error", "credits_added": 0, "message": "Failed to retrieve customer details"}

    if not customer_email:
        print("No customer email found in Stripe")
        return {"status": "error", "message": "No customer email found"}

    # Get user document by email
    user_query = db_client.collection("users").where(
        "email", "==", customer_email
    ).limit(1).get()

    if not user_query:
        print(f"No user found for email {customer_email}")
        return {"status": "error", "message": "User not found"}

    user_doc = user_query[0]
    user_ref = user_doc.reference
    user_data = user_doc.to_dict()

    # Update user with Stripe customer ID if not already set
    if not user_doc.get("stripeCustomerId"):
        user_ref.set({"stripeCustomerId": customer_id}, merge=True)

    # Get subscription document
    subscription_ref = db_client.collection("subscriptions").document(user_doc.id)
    subscription_doc = subscription_ref.get()
    
    if not subscription_doc.exists:
        print(f"No subscription document found for user {user_doc.id}")
        return {"status": "error", "credits_added": 0, "message": "No subscription document found"}
        
    subscription_data = subscription_doc.to_dict()
    current_period_start = subscription_data.get("currentPeriodStart")
    new_period_start = datetime.fromtimestamp(subscription.get("current_period_start", 0)).isoformat()
    credits_per_period = subscription_data.get("creditsPerPeriod", 0)

    # Get subscription details for price update check
    subscription_item = subscription.get("items", {}).get("data", [])[0]
    if not subscription_item:
        return {"status": "error", "credits_added": 0, "message": "No subscription items found"}
        
    price_id = subscription_item.get("price", {}).get("id")
    if not price_id:
        return {"status": "error", "credits_added": 0, "message": "No price ID found"}

    # Update subscription details while preserving and updating all fields
    updated_subscription_data = {
        # Subscription Core Details
        "subscriptionId": subscription.get("id"),
        "status": subscription.get("status"),
        "currentPeriodStart": new_period_start,
        "currentPeriodEnd": datetime.fromtimestamp(subscription.get("current_period_end", 0)).isoformat(),
        "cancelAtPeriodEnd": subscription.get("cancel_at_period_end", False),
        "creditsPerPeriod": credits_per_period,
        
        # Price and Product Details
        "priceId": price_id,
        "productId": subscription_item.get("price", {}).get("product"),
        "amount": subscription_item.get("price", {}).get("unit_amount", 0) / 100,
        "currency": subscription_item.get("price", {}).get("currency", "usd"),
        
        # User Details
        "userId": user_doc.id,
        "userEmail": user_data.get("email"),
        "userName": user_data.get("name"),
        
        # Stripe Customer Details
        "stripeCustomerId": customer_id,
        "stripeCustomerEmail": customer_email,
        "stripeCustomerName": stripe_customer.get("name"),
        
        # Metadata and Timestamps
        "createdAt": subscription_data.get("createdAt"),  # Preserve original creation date
        "updatedAt": datetime.utcnow().isoformat(),
        "lastBillingDate": new_period_start,
        "nextBillingDate": datetime.fromtimestamp(subscription.get("current_period_end", 0)).isoformat(),
        
        # Subscription Config
        "isActive": True,
        "type": "monthly",
    }

    # If this is a new period (period start date has changed), just update subscription status
    if current_period_start != new_period_start:
        print(f"New period detected! Updating subscription status")
        
        # Update subscription status only (no credits added for renewals)
        updated_data = {
            "subscriptionStatus": "active",
            "subscriptionTier": "monthly",
            "lastActive": datetime.utcnow().isoformat(),
        }
        
        user_ref.set(updated_data, merge=True)
        print(f"Updated subscription status for user {user_doc.id}")
        
        # Update subscription document
        subscription_ref.set(updated_subscription_data, merge=True)
        
        return {
            "status": "success",
            "credits_added": 0,
            "message": f"Renewed subscription for user {user_doc.id}: subscription active"
        }
    
    # Update subscription document even if it's not a new period
    subscription_ref.set(updated_subscription_data, merge=True)
    return {"status": "success", "credits_added": 0, "message": "No renewal needed"}

def handle_subscription_deleted(subscription):
    """Handle a subscription being cancelled"""
    # Get customer ID and email from subscription
    customer_id = subscription.get("customer")
    if not customer_id:
        print("No customer ID found in subscription")
        return {"status": "error", "credits_added": 0, "message": "No customer ID found"}

    # Get customer email from Stripe
    try:
        stripe_customer = stripe.Customer.retrieve(customer_id)
        customer_email = stripe_customer.get("email")
    except Exception as e:
        print(f"Error retrieving Stripe customer: {str(e)}")
        return {"status": "error", "credits_added": 0, "message": "Failed to retrieve customer details"}

    if not customer_email:
        print("No customer email found in Stripe")
        return {"status": "error", "message": "No customer email found"}

    # Get user document by email
    user_query = db_client.collection("users").where(
        "email", "==", customer_email
    ).limit(1).get()

    if not user_query:
        print(f"No user found for email {customer_email}")
        return {"status": "error", "message": "User not found"}

    user_doc = user_query[0]
    user_ref = user_doc.reference
    user_data = user_doc.to_dict()

    # Update user with Stripe customer ID if not already set
    if not user_doc.get("stripeCustomerId"):
        user_ref.set({"stripeCustomerId": customer_id}, merge=True)

    # Check if subscription has remaining time
    current_period_end = subscription.get("current_period_end")
    has_remaining_time = current_period_end and current_period_end > int(datetime.utcnow().timestamp())

    # Update user stats with new "cancelled_active" status
    updated_data = {
        "subscriptionStatus": "cancelled_active" if has_remaining_time else "expired",
        "subscriptionTier": "monthly",  # Keep as monthly until period ends
        "lastActive": datetime.utcnow().isoformat(),
        "subscriptionEndDate": datetime.fromtimestamp(current_period_end).isoformat() if has_remaining_time else None
    }

    user_ref.set(updated_data, merge=True)

    # Update subscription document
    subscription_ref = db_client.collection("subscriptions").document(user_doc.id)
    subscription_doc = subscription_ref.get()

    if subscription_doc.exists:
        subscription_data = subscription_doc.to_dict()
        # Update subscription details while preserving history
        updated_subscription_data = {
            # Subscription Core Details
            "subscriptionId": subscription.get("id"),
            "status": "cancelled_active" if has_remaining_time else "cancelled",
            "currentPeriodStart": subscription_data.get("currentPeriodStart"),
            "currentPeriodEnd": datetime.fromtimestamp(subscription.get("current_period_end", 0)).isoformat(),
            "cancelAtPeriodEnd": True,
            "creditsPerPeriod": subscription_data.get("creditsPerPeriod", 0),
            "cancellationDate": datetime.utcnow().isoformat(),
            "effectiveCancellationDate": datetime.fromtimestamp(current_period_end).isoformat() if has_remaining_time else datetime.utcnow().isoformat(),

            # User Details
            "userId": user_doc.id,
            "userEmail": user_data.get("email"),
            "userName": user_data.get("name"),

            # Stripe Customer Details
            "stripeCustomerId": customer_id,
            "stripeCustomerEmail": customer_email,
            "stripeCustomerName": stripe_customer.get("name"),

            # Metadata and Timestamps
            "createdAt": subscription_data.get("createdAt"),  # Preserve original creation date
            "updatedAt": datetime.utcnow().isoformat(),
            "cancelledAt": datetime.utcnow().isoformat(),
            "lastBillingDate": subscription_data.get("lastBillingDate"),
            "nextBillingDate": datetime.fromtimestamp(subscription.get("current_period_end", 0)).isoformat() if has_remaining_time else None,

            # Subscription Config
            "isActive": has_remaining_time,
            "type": "monthly",
        }

        print(f"Updating cancelled subscription with data: {updated_subscription_data}")
        subscription_ref.set(updated_subscription_data, merge=True)

    return {
        "status": "success",
        "credits_added": 0,
        "message": f"Subscription cancelled for user {user_doc.id} (effective {datetime.fromtimestamp(current_period_end).isoformat() if has_remaining_time else 'immediately'})"
    }


================================================
File: backend/app/apis/property/__init__.py
================================================
from fastapi import APIRouter, HTTPException
from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field
import databutton as db
import requests
from shapely import wkt
from shapely.geometry import mapping
import json
from app.apis.other_data import get_distance_to_city, DistanceRequest

class Address(BaseModel):
    city: Optional[str] = None
    state: Optional[str] = None
    streetAddress: Optional[str] = None
    zipcode: Optional[str] = None


class AcrePriceData(BaseModel):
    acre: Optional[float] = None
    price: Optional[float] = None
    address: Optional[str] = None

class PriceEstimate(BaseModel):
    url: Optional[str] = None
    price: Optional[str] = None
    website_name: Optional[str] = None

class PropertyDetailsResponse(BaseModel):
    # Metadata
    id: Optional[str] = Field(None, description="Unique identifier for the property")
    isSaved: Optional[bool] = Field(None, description="Whether the property is saved by the user")
    
    # Parcel Data
    propertyId: Optional[str] = Field(None, description="Property ID from county records")
    ownerName: Optional[str] = Field(None, description="Property owner name")
    legalArea: Optional[str] = Field(None, description="Legal area with units")
    legalAreaUnits: Optional[str] = Field(None, description="Legal area units")
    gisArea: Optional[float] = Field(None, description="GIS calculated area")
    gisAreaUnits: Optional[str] = Field(None, description="GIS area units")
    landValue: Optional[int] = Field(None, description="Assessed land value")
    improvementValue: Optional[int] = Field(None, description="Assessed improvement value")
    marketValue: Optional[int] = Field(None, description="Total market value")
    dateAcquired: Optional[int] = Field(None, description="Date property was acquired")
    fipsCode: Optional[str] = Field(None, description="FIPS code")
    county: Optional[str] = Field(None, description="County name")
    taxYear: Optional[int] = Field(None, description="Tax assessment year")
    
    # Address
    address: Address
    zpid: int
 
    latitude: Optional[float] = None
    longitude: Optional[float] = None

    # Distance to City
    timeToCity: Optional[str] = None
    distanceToCity: Optional[str] = None
    
    # Analysis and Comparisons
    priceComparisons: Optional[List[PriceEstimate]] = Field(
        None,
        description="Price estimates from different websites"
    )
    predicted_price: Optional[str] = Field(
        None,
        description="AI predicted price for the property"
    )
    confidence_score: Optional[str] = Field(
        None,
        description="Confidence score for the predicted price (0-1)"
    )
    price_reasoning: Optional[str] = Field(
        None,
        description="Reasoning behind the predicted price"
    )
    
    # Acre Prices
    acre_prices: Optional[List[AcrePriceData]] = Field(
        None,
        description="Comparable land prices by acre in the area"
    )

class PropertySearchResult(BaseModel):
    zpid: str
    streetAddress: str
    city: str
    state: str
    zipcode: str
    latitude: float
    longitude: float

router = APIRouter()







================================================
File: backend/app/apis/scrape/__init__.py
================================================
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Dict
import databutton as db
import requests
from openai import OpenAI
from firecrawl import FirecrawlApp

router = APIRouter()

class AcrePriceData(BaseModel):
    acre: float | None = None
    price: float | None = None
    address: str | None = None

class ExtractAcreSchema(BaseModel):
    prices: list[AcrePriceData] | None = None

class AcrePricesRequest(BaseModel):
    city: str
    acres: float
    zip_code: str

class AcrePricesResponse(BaseModel):
    prices: list[AcrePriceData]

class FirecrawlPrice(BaseModel):
    """Base model matching Firecrawl's price extraction schema"""
    url: Optional[str] = None
    price: Optional[str] = None
    website_name: Optional[str] = None

class ScrapingRequest(BaseModel):
    address: str
    city: str
    state: str


def extract_prices_with_firecrawl(urls: List[str], address: str, location_id: str = None) -> Dict:
    """Extract prices from multiple URLs using Firecrawl's extract endpoint
    
    Args:
        urls: List of URLs to extract prices from
        location_id: Optional location ID for logging
    
    Returns:
        Raw response from Firecrawl API
    """
    # Initialize Firecrawl
    app = FirecrawlApp(api_key=db.secrets.get("FIRECRAWL_API_KEY"))
    
    # Define extraction schema
    class ExtractSchema(BaseModel):
        prices: list[FirecrawlPrice]
    
    # Extract prices for all URLs in one call and return raw response
    print("Extracting prices from URLs:", urls)
    try:
        response = app.extract(
            urls,
            {
                'prompt': f'Extract the price of the property with address from the given URL.',
                'schema': ExtractSchema.model_json_schema(),
                "includeSubdomains": False,
                "enableWebSearch": False,
            }
        )
        print("Raw Firecrawl response:", response)
        return response
    except Exception as e:
        print(f"Error in Firecrawl extraction: {e}")
        return {'prices': []}

class PricePredictionRequest(BaseModel):
    address: str
    priceComparisons: list[FirecrawlPrice]

class PricePredictionResponse(BaseModel):
    predicted_price: str
    confidence_score: str  # 0-1 scale
    reasoning: str

@router.post("/scrape/predict-price")
async def predict_price(request: PricePredictionRequest) -> PricePredictionResponse:
    client = OpenAI(api_key=db.secrets.get("DB_OPENAI_API_KEY"))
    
    # Construct the prompt with price comparisons
    prompt = f"""You are a real estate price prediction expert. Based on the following price comparisons, predict the current market value of this property.

Property Location:
{request.address}

Price Comparisons:
{chr(10).join(f"- {comp.website_name or comp.url or 'Unknown'}: {comp.price or 'No price found'}" for comp in request.priceComparisons)}

Please analyze this information and provide:
1. A predicted market value for the property
2. A confidence score (0-1) in your prediction
3. A detailed explanation of your reasoning

Format your response exactly like this example:
Predicted Price: 450000
Confidence: 0.85
Reasoning: Based on the recent comparable sales in the area...

If there are no price comparisons, return a confidence score of 0 and explain why a prediction cannot be made.
"""

    try:
        # Get completion from OpenAI
        completion = client.chat.completions.create(
            model="o3-mini",
            messages=[
                {"role": "system", "content": "You are a real estate valuation expert. Always respond in the exact format specified."},
                {"role": "user", "content": prompt}
            ]
        )
        
        # Parse the response
        response_text = completion.choices[0].message.content
        print("GPT-4 Response:", response_text)
        
        # Extract values from the response
        try:
            lines = response_text.strip().split('\n')
            print("Split lines:", lines)
            
            if len(lines) < 3:
                raise ValueError("Response does not contain enough lines. Got " + str(len(lines)) + " lines, expected at least 3")
            
            # Extract predicted price
            if not lines[0].startswith("Predicted Price:"):
                raise ValueError("First line does not start with 'Predicted Price:'. Got: " + lines[0])
            predicted_price = lines[0].split(': ')[1].strip()
            
            # Extract confidence
            if not lines[1].startswith("Confidence:"):
                raise ValueError(f"Second line does not start with 'Confidence:'. Got: {lines[1]}")
            confidence = lines[1].split(': ')[1].strip()
            
            # Extract reasoning
            reasoning = '\n'.join(lines[2:]).replace('Reasoning: ', '', 1)
            
            print("Parsed values - Price: " + str(predicted_price) + ", Confidence: " + str(confidence))
        except Exception as e:
            print("Error parsing GPT-4 response: " + str(e))
            raise ValueError("Failed to parse GPT-4 response: " + str(e) + ". Full response: " + response_text) from e
        
        return PricePredictionResponse(
            predicted_price=predicted_price,
            confidence_score=confidence,
            reasoning=reasoning
        )
        
    except Exception as e:
        print("Error in price prediction: " + str(e))
        raise HTTPException(
            status_code=500,
            detail="Failed to generate price prediction"
        ) from e

@router.post("/scrape/estimates")
def get_price_estimates(request: ScrapingRequest) -> List[FirecrawlPrice]:
    """Get price estimates from various sources for a property using Firecrawl for extraction"""
    # Generate location ID from address
    location_id = f"{request.address}, {request.city}, {request.state}"
    """Get price estimates from various sources for a property"""
    try:
        # Format address for search
        address = f"{request.address}, {request.city}, {request.state}"

        # Format the search query
        search_query = f"price of {address}"

        # Prepare the API request
        url = "https://api.exa.ai/search"

        payload = {
            "query": search_query,
            "useAutoprompt": True,
            "numResults": 15,
            "contents": {
                "text": True,
            },
        }

        headers = {
            "x-api-key": db.secrets.get("EXA_API_KEY"),
            "Content-Type": "application/json",
        }

        # Make the API request
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()


        # Parse results
        results = response.json()

        # Extract URLs from results
        urls = [result.get("url", "") for result in results.get("results", [])]
        urls = [url for url in urls if url]  # Filter out empty URLs
        urls = urls[:10]  # Limit to 10 URLs for Firecrawl beta
        
        # Extract prices using Firecrawl
        firecrawl_data = extract_prices_with_firecrawl(urls, address, location_id)
        
        # Return Firecrawl prices
        # Handle success/data structure
        if firecrawl_data.get('success'):
            prices_data = firecrawl_data.get('data', {}).get('prices', [])
            print("Firecrawl prices data:", prices_data)
            return [FirecrawlPrice(
                website_name=price_info.get('website_name', 'Unknown'),
                url=price_info.get('url', ''),
                price=price_info.get('price', 'No price found')
            ) for price_info in prices_data]
            # Handle direct prices array
        print("No prices found in Firecrawl response:", firecrawl_data)
        return []

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e)) from e

@router.post('/scrape/acres-prices')
def get_acres_prices(request: AcrePricesRequest) -> AcrePricesResponse:
    """Get land prices for a specific acre range in a city"""
    try:
        # Initialize Firecrawl
        app = FirecrawlApp(api_key=db.secrets.get("FIRECRAWL_API_KEY"))
        
        # Format city name in different formats
        formatted_city_1 = '_'.join(word.capitalize() for word in request.city.split(' '))
        formatted_city_2 = request.city.replace(' ', '-').lower()
        
        # Capitalize the first letter of each word and join with hyphens
        formatted_city_3 = '-'.join(word.capitalize() for word in request.city.split(' '))
        
        # Generate Trulia URL for land/lots
        urls = [
            f"https://www.trulia.com/TX/{formatted_city_1}/{request.zip_code}/LOT%7CLAND_type/",
            f"https://www.landwatch.com/texas-land-for-sale/{formatted_city_2}/undeveloped-land",
            f"https://www.land.com/{formatted_city_3}-TX/all-land/no-house/for-sale/"
        ]
        
        print(f"Extracting acre prices from URL: {urls}")
        
        # Call Firecrawl with schema
        response = app.extract(
            urls, 
        {
            'prompt': 'From the properties listed, I would need to extract the size and price. ',
            'schema': ExtractAcreSchema.model_json_schema(),
        })
        
        print(f"Firecrawl response: {response}")
        
        # Return extracted prices
        if response and response.get('success') and response.get('data', {}).get('prices'):
            prices_data = response['data']['prices']
            
            # Check if prices is a dictionary with numeric keys and convert to list
            if isinstance(prices_data, dict):
                prices_list = [prices_data[k] for k in prices_data.keys()]
                return AcrePricesResponse(prices=prices_list)
            # If it's already a list, return it directly
            elif isinstance(prices_data, list):
                return AcrePricesResponse(prices=prices_data)
            
        return AcrePricesResponse(prices=[])
        
    except Exception as e:
        print(f"Error getting acre prices: {e}")
        raise HTTPException(status_code=500, detail=str(e)) from e


================================================
File: backend/app/auth/__init__.py
================================================
from .user import AuthorizedUser, User

__all__ = ["AuthorizedUser", "User"]


================================================
File: backend/app/auth/user.py
================================================
"""Fastapi dependency to extract user that has been authenticated by middleware.

Usage:

    from app.auth import AuthorizedUser

    @router.get("/example-data")
    def get_example_data(user: AuthorizedUser):
        return example_read_data_for_user(userId=user.sub)
"""

from typing import Annotated

from fastapi import Depends

from databutton_app.mw.auth_mw import get_authorized_user, User


AuthorizedUser = Annotated[User, Depends(get_authorized_user)]


================================================
File: backend/databutton_app/mw/auth_mw.py
================================================
import functools
from http import HTTPStatus
from typing import Annotated, Callable
import jwt
from fastapi import Depends, HTTPException, WebSocket, WebSocketException, status
from fastapi.requests import HTTPConnection
from jwt import PyJWKClient
from pydantic import BaseModel
from starlette.requests import Request


class AuthConfig(BaseModel):
    jwks_url: str
    audience: str
    header: str


class User(BaseModel):
    # The subject, or user ID, from the authenticated token
    sub: str

    # Optional extra user data
    user_id: str | None = None
    name: str | None = None
    picture: str | None = None
    email: str | None = None


def get_auth_config(request: HTTPConnection) -> AuthConfig:
    auth_config: AuthConfig | None = request.app.state.auth_config

    if auth_config is None:
        raise HTTPException(
            status_code=HTTPStatus.UNAUTHORIZED, detail="No auth config"
        )
    return auth_config


AuthConfigDep = Annotated[AuthConfig, Depends(get_auth_config)]


def get_audit_log(request: HTTPConnection) -> Callable[[str], None] | None:
    return getattr(request.app.state.databutton_app_state, "audit_log", None)


AuditLogDep = Annotated[Callable[[str], None] | None, Depends(get_audit_log)]


def get_authorized_user(
    request: HTTPConnection,
) -> User:
    auth_config = get_auth_config(request)

    try:
        if isinstance(request, WebSocket):
            user = authorize_websocket(request, auth_config)
        elif isinstance(request, Request):
            user = authorize_request(request, auth_config)
        else:
            raise ValueError("Unexpected request type")

        if user is not None:
            return user
        print("Request authentication returned no user")
    except Exception as e:
        print(f"Request authentication failed: {e}")

    if isinstance(request, WebSocket):
        raise WebSocketException(
            code=status.WS_1008_POLICY_VIOLATION, reason="Not authenticated"
        )
    else:
        raise HTTPException(
            status_code=HTTPStatus.UNAUTHORIZED, detail="Not authenticated"
        )


@functools.cache
def get_jwks_client(url: str):
    """Reuse client cached by its url, client caches keys by default."""
    return PyJWKClient(url, cache_keys=True)


def get_signing_key(url: str, token: str) -> tuple[str, str]:
    client = get_jwks_client(url)
    signing_key = client.get_signing_key_from_jwt(token)
    key = signing_key.key
    alg = signing_key.algorithm_name
    if alg != "RS256":
        raise ValueError(f"Unsupported signing algorithm: {alg}")
    return (key, alg)


def authorize_websocket(
    request: WebSocket,
    auth_config: AuthConfig,
) -> User | None:
    # Parse Sec-Websocket-Protocol
    header = "Sec-Websocket-Protocol"
    sep = ","
    prefix = "Authorization.Bearer."
    protocols_header = request.headers.get(header)
    protocols = (
        [h.strip() for h in protocols_header.split(sep)] if protocols_header else []
    )

    token: str | None = None
    for p in protocols:
        if p.startswith(prefix):
            token = p.removeprefix(prefix)
            break

    if not token:
        print(f"Missing bearer {prefix}.<token> in protocols")
        return None

    return authorize_token(token, auth_config)


def authorize_request(
    request: Request,
    auth_config: AuthConfig,
) -> User | None:
    auth_header = request.headers.get(auth_config.header)
    if not auth_header:
        print(f"Missing header '{auth_config.header}'")
        return None

    token = auth_header.startswith("Bearer ") and auth_header[7:]
    if not token:
        print(f"Missing bearer token in '{auth_config.header}'")
        return None

    return authorize_token(token, auth_config)


def authorize_token(
    token: str,
    auth_config: AuthConfig,
) -> User | None:
    # Audience and jwks url to get signing key from based on the users config
    jwks_urls = [(auth_config.audience, auth_config.jwks_url)]

    payload = None
    for audience, jwks_url in jwks_urls:
        try:
            key, alg = get_signing_key(jwks_url, token)
        except Exception as e:
            print(f"Failed to get signing key {e}")
            continue

        try:
            payload = jwt.decode(
                token,
                key=key,
                algorithms=[alg],
                audience=audience,
            )
        except jwt.PyJWTError as e:
            print(f"Failed to decode and validate token {e}")
            continue

    try:
        user = User.model_validate(payload)
        print(f"User {user.sub} authenticated")
        return user
    except Exception as e:
        print(f"Failed to parse token payload {e}")
        return None


================================================
File: frontend/README.md
================================================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```


================================================
File: frontend/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================================================
File: frontend/index.html
================================================
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link href="/light.ico" rel="icon" media="(prefers-color-scheme: light)">
  <link href="/dark.ico" rel="icon" media="(prefers-color-scheme: dark)">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

  <title>Databutton</title>

  <load src="head.html" />
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.tsx"></script>
</body>

</html>

================================================
File: frontend/install.sh
================================================
#!/bin/bash

corepack enable

yarn set version stable

yarn install 

yarn dlx @yarnpkg/sdks vscode


================================================
File: frontend/package.json
================================================
{
  "name": "landglide",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@11labs/react": "0.0.4",
    "@ag-grid-enterprise/all-modules": "27.3.0",
    "@chakra-ui/icons": "2.1.1",
    "@chakra-ui/react": "2.8.2",
    "@chakra-ui/system": "2.6.2",
    "@ckeditor/ckeditor5-build-classic": "42.0.2",
    "@ckeditor/ckeditor5-react": "8.0.0",
    "@clerk/clerk-react": "5.22.13",
    "@dnd-kit/core": "6.1.0",
    "@dnd-kit/sortable": "8.0.0",
    "@dnd-kit/utilities": "3.2.2",
    "@emotion/react": "11.11.3",
    "@emotion/styled": "11.11.0",
    "@fontsource/roboto": "5.1.1",
    "@heygen/streaming-avatar": "2.0.8",
    "@hookform/resolvers": "^3.9.0",
    "@liveblocks/client": "2.9.1",
    "@liveblocks/react": "2.9.1",
    "@liveblocks/zustand": "2.9.1",
    "@mapbox/mapbox-gl-draw": "1.5.0",
    "@mui/icons-material": "6.3.1",
    "@mui/material": "6.3.1",
    "@mysten/sui": "1.16.0",
    "@openai/realtime-api-beta": "github:openai/openai-realtime-api-beta",
    "@pdfme/common": "5.3.3",
    "@pdfme/generator": "5.3.3",
    "@pdfme/schemas": "5.3.3",
    "@pdfme/ui": "5.3.3",
    "@play-ai/agent-web-sdk": "^0.1.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.2",
    "@react-google-maps/api": "2.20.3",
    "@react-pdf/renderer": "3.4.4",
    "@react-three/drei": "9.120.3",
    "@react-three/fiber": "8.17.10",
    "@remotion/player": "4.0.264",
    "@reown/appkit": "1.5.2",
    "@reown/appkit-adapter-solana": "1.5.3",
    "@reown/appkit-adapter-wagmi": "1.5.2",
    "@sanity/client": "6.28.0",
    "@solana/wallet-adapter-react": "0.15.35",
    "@solana/wallet-adapter-wallets": "0.19.32",
    "@solana/web3.js": "1.95.5",
    "@stripe/react-stripe-js": "2.9.0",
    "@stripe/stripe-js": "5.0.0",
    "@suiet/wallet-kit": "0.3.3",
    "@supabase/auth-ui-react": "0.4.7",
    "@supabase/auth-ui-shared": "0.1.8",
    "@supabase/supabase-js": "2.47.3",
    "@tailwindcss/typography": "0.5.10",
    "@talkjs/react": "0.1.11",
    "@tanstack/react-query": "5.61.4",
    "@tiptap/extension-bullet-list": "2.9.1",
    "@tiptap/extension-character-count": "2.9.1",
    "@tiptap/extension-code-block": "2.9.1",
    "@tiptap/extension-code-block-lowlight": "2.9.1",
    "@tiptap/extension-collaboration": "2.9.1",
    "@tiptap/extension-collaboration-cursor": "2.9.1",
    "@tiptap/extension-color": "2.9.1",
    "@tiptap/extension-document": "2.9.1",
    "@tiptap/extension-dropcursor": "2.9.1",
    "@tiptap/extension-focus": "2.9.1",
    "@tiptap/extension-font-family": "2.9.1",
    "@tiptap/extension-heading": "2.9.1",
    "@tiptap/extension-highlight": "2.9.1",
    "@tiptap/extension-horizontal-rule": "2.9.1",
    "@tiptap/extension-image": "2.9.1",
    "@tiptap/extension-link": "2.9.1",
    "@tiptap/extension-ordered-list": "2.9.1",
    "@tiptap/extension-paragraph": "2.9.1",
    "@tiptap/extension-placeholder": "2.9.1",
    "@tiptap/extension-subscript": "2.9.1",
    "@tiptap/extension-superscript": "2.9.1",
    "@tiptap/extension-table": "2.9.1",
    "@tiptap/extension-table-header": "2.9.1",
    "@tiptap/extension-table-row": "2.9.1",
    "@tiptap/extension-task-item": "2.9.1",
    "@tiptap/extension-task-list": "2.9.1",
    "@tiptap/extension-text-align": "2.9.1",
    "@tiptap/extension-text-style": "2.9.1",
    "@tiptap/extension-typography": "2.9.1",
    "@tiptap/extension-underline": "2.9.1",
    "@tiptap/pm": "2.4.0",
    "@tiptap/react": "2.4.0",
    "@tiptap/starter-kit": "2.4.0",
    "@tomtom-international/web-sdk-maps": "6.25.0",
    "@tomtom-international/web-sdk-services": "6.25.0",
    "@turf/turf": "7.2.0",
    "@uidotdev/usehooks": "2.4.1",
    "@vapi-ai/web": "2.1.3",
    "@wavesurfer/react": "1.0.7",
    "@xyflow/react": "12.4.1",
    "@xzdarcy/react-timeline-editor": "0.1.9",
    "ag-grid-react": "32.1.0",
    "agora-rtc-react": "2.3.0",
    "agora-rtc-sdk-ng": "4.23.1",
    "amplitude-js": "8.21.9",
    "audio-decode": "2.2.2",
    "chart.js": "4.4.7",
    "ckeditor5": "42.0.2",
    "ckeditor5-premium-features": "42.0.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "1.0.0",
    "cobe": "0.6.3",
    "convex": "1.11.2",
    "daisyui": "4.12.23",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.2.1",
    "fabric": "6.5.3",
    "firebase": "10.8.0",
    "framer-motion": "10.18.0",
    "grapesjs": "0.22.5",
    "grapesjs-react": "4.0.2",
    "html2canvas": "1.4.1",
    "i18next": "24.2.0",
    "i18next-browser-languagedetector": "8.0.2",
    "input-otp": "^1.2.4",
    "jspdf": "2.5.1",
    "leaflet": "1.9.4",
    "lightweight-charts": "4.2.1",
    "livekit-client": "2.7.3",
    "lodash": "4.17.21",
    "lucide-react": "^0.439.0",
    "mammoth": "1.8.0",
    "mapbox-gl": "3.1.2",
    "mermaid": "^10.9.0",
    "mixpanel-browser": "2.52.0",
    "next-themes": "^0.3.0",
    "openai-partial-stream": "0.3.9",
    "pdfjs-dist": "^4.8.69",
    "plotly.js": "2.27.1",
    "qrcode.react": "4.2.0",
    "react": "18.2.0",
    "react-beautiful-dnd": "13.1.1",
    "react-big-calendar": "1.17.1",
    "react-colorful": "5.6.1",
    "react-confetti": "6.1.0",
    "react-datasheet-grid": "4.11.4",
    "react-day-picker": "8.10.1",
    "react-diff-viewer": "3.1.1",
    "react-dom": "18.2.0",
    "react-dropzone": "14.3.5",
    "react-easy-crop": "5.2.0",
    "react-email-editor": "1.7.11",
    "react-error-boundary": "4.0.11",
    "react-firebase-hooks": "5.1.1",
    "react-firebaseui": "6.0.0",
    "react-grid-layout": "1.5.0",
    "react-helmet": "6.1.0",
    "react-hook-form": "^7.53.0",
    "react-i18next": "15.4.0",
    "react-icons": "5.0.1",
    "react-intersection-observer": "9.14.1",
    "react-leaflet": "4.2.1",
    "react-lottie-player": "1.5.6",
    "react-map-gl": "7.1.7",
    "react-markdown": "9.0.1",
    "react-mentions": "4.4.10",
    "react-plotly.js": "2.6.0",
    "react-quill": "2.0.0",
    "react-remark": "2.1.0",
    "react-resizable-panels": "^2.1.2",
    "react-router-dom": "6.17.0",
    "react-select": "5.8.0",
    "react-slick": "0.30.2",
    "react-social-media-embed": "2.5.17",
    "react-table": "7.8.0",
    "react-use-websocket": "4.9.0",
    "react-virtualized-auto-sizer": "1.0.25",
    "react-window": "1.8.11",
    "react-zxing": "2.0.2",
    "recharts": "^2.12.7",
    "recordrtc": "5.6.2",
    "remark-gfm": "4.0.0",
    "remotion": "4.0.264",
    "shepherd.js": "14.1.0",
    "sonner": "^1.5.0",
    "stream-chat": "8.43.0",
    "stream-chat-react": "12.5.1",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "talkjs": "0.31.0",
    "tesseract.js": "5.1.1",
    "three": "0.171.0",
    "tone": "15.0.4",
    "userflow.js": "2.12.1",
    "vaul": "^0.9.2",
    "viem": "2.21.51",
    "vite-plugin-html-inject": "1.1.2",
    "wagmi": "2.13.0",
    "wavesurfer.js": "7.8.11",
    "web-vitals": "4.2.4",
    "xlsx": "0.18.5",
    "zod": "^3.23.8",
    "zustand": "4.5.5"
  },
  "devDependencies": {
    "@biomejs/biome": "1.8.3",
    "@sentry/react": "7.101.1",
    "@sentry/types": "7.101.1",
    "@types/amplitude-js": "^8",
    "@types/firebase": "^3.2.1",
    "@types/leaflet": "1.9.14",
    "@types/lodash": "^4",
    "@types/mapbox-gl": "2.7.20",
    "@types/mapbox__mapbox-gl-draw": "^1",
    "@types/mixpanel-browser": "^2",
    "@types/node": "20.6.2",
    "@types/react": "18.2.32",
    "@types/react-beautiful-dnd": "^13",
    "@types/react-big-calendar": "^1",
    "@types/react-dom": "18.2.7",
    "@types/react-grid-layout": "^1",
    "@types/react-helmet": "^6",
    "@types/react-mentions": "^4",
    "@types/react-slick": "^0",
    "@types/react-table": "^7",
    "@types/react-window": "^1",
    "@types/recordrtc": "^5",
    "@types/three": "^0",
    "@vitejs/plugin-react-swc": "3.3.2",
    "autoprefixer": "^10.4.20",
    "dotenv": "16.4.5",
    "eslint": "8.45.0",
    "eslint-plugin-react": "7.32.2",
    "eslint-plugin-react-hooks": "4.6.0",
    "eslint-plugin-react-refresh": "0.4.3",
    "openapi-types": "12.1.3",
    "postcss": "^8.4.45",
    "raw-body": "2.5.2",
    "tailwindcss": "^3.4.10",
    "ts-prune": "0.10.3",
    "type-fest": "4.6.0",
    "typescript": "5.2.2",
    "typescript-language-server": "4.3.2",
    "vite": "4.4.5",
    "vite-tsconfig-paths": "4.2.2",
    "@vitejs/plugin-react": "^4.0.0",
    "@firebase/app": "^0.11.1"
  },
  "packageManager": "yarn@4.0.2",
  "nodeLinker": "pnpm"
}

================================================
File: frontend/postcss.config.js
================================================
export default {
  plugins: {
    autoprefixer: {},
    tailwindcss: {},
  },
};


================================================
File: frontend/run.sh
================================================
#!/bin/bash

yarn dev

================================================
File: frontend/tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          1: "hsl(var(--chart-1))",
          2: "hsl(var(--chart-2))",
          3: "hsl(var(--chart-3))",
          4: "hsl(var(--chart-4))",
          5: "hsl(var(--chart-5))",
        },
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};

================================================
File: frontend/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ESNext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "allowImportingTsExtensions": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": false,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": {
      "brain": [
        "./src/brain"
      ],
      "types": [
        "./src/brain/data-contracts.ts"
      ],
      "components/*": [
        "./src/components/*"
      ],
      "pages/*": [
        "./src/pages/*"
      ],
      "app": [
        "./src/app"
      ],
      "app/auth": [
        "./src/app/auth"
      ],
      "utils/*": [
        "./src/utils/*"
      ],
      "@/*": [
        "./src/*"
      ],
      "@/hooks/*": [
        "./src/extensions/shadcn/hooks/*"
      ],
      "@/components/hooks/*": [
        "./src/extensions/shadcn/hooks/*"
      ],
      "@/components/ui/*": [
        "./src/extensions/shadcn/components/*"
      ],
    }
  },
  "include": [
    "env.d.ts",
    "src"
  ],
  "exclude": [
    "src/brain/Brain.ts",
    "src/brain/BrainRoute.ts",
    "src/brain/data-contracts.ts",
    "src/brain/http-client.ts"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  }
}

================================================
File: frontend/tsconfig.node.json
================================================
{
  "compilerOptions": {
    "composite": true,
    "target": "ESNext",
    "strict": true,
    "module": "esnext",
    "allowSyntheticDefaultImports": true,
    "moduleResolution": "node"
  },
  "include": [
    "vite.config.ts",
    "server"
  ]
}


================================================
File: frontend/vite.config.ts
================================================
import react from "@vitejs/plugin-react";
import "dotenv/config";
import path from "node:path";
import { defineConfig, splitVendorChunkPlugin } from "vite";
import injectHTML from "vite-plugin-html-inject";
import tsConfigPaths from "vite-tsconfig-paths";

type Extension = {
	name: string;
	version: string;
	config: Record<string, unknown>;
};

enum ExtensionName {
	FIREBASE_AUTH = "firebase-auth",
}

const listExtensions = (): Extension[] => {
	if (process.env.DATABUTTON_EXTENSIONS) {
		try {
			return JSON.parse(process.env.DATABUTTON_EXTENSIONS) as Extension[];
		} catch (err: unknown) {
			console.error("Error parsing DATABUTTON_EXTENSIONS", err);
			console.error(process.env.DATABUTTON_EXTENSIONS);
			return [];
		}
	}

	return [];
};

const extensions = listExtensions();

const getExtensionConfig = (name: string): string => {
	const extension = extensions.find((it) => it.name === name);

	if (!extension) {
		console.warn(`Extension ${name} not found`);
	}

	return JSON.stringify(extension?.config);
};

const buildVariables = () => {
	const appId = process.env.DATABUTTON_PROJECT_ID;

	const defines: Record<string, string> = {
		__APP_ID__: JSON.stringify(appId),
		__API_PATH__: JSON.stringify(""),
		__API_URL__: JSON.stringify("http://localhost:8000"),
		__WS_API_URL__: JSON.stringify("ws://localhost:8000"),
		__APP_BASE_PATH__: JSON.stringify("/"),
		__APP_TITLE__: JSON.stringify("Databutton"),
		__APP_FAVICON_LIGHT__: JSON.stringify("/favicon-light.svg"),
		__APP_FAVICON_DARK__: JSON.stringify("/favicon-dark.svg"),
		__APP_DEPLOY_USERNAME__: JSON.stringify(""),
		__APP_DEPLOY_APPNAME__: JSON.stringify(""),
		__APP_DEPLOY_CUSTOM_DOMAIN__: JSON.stringify(""),
		__FIREBASE_CONFIG__: JSON.stringify(
			getExtensionConfig(ExtensionName.FIREBASE_AUTH),
		),
	};

	return defines;
};

// https://vite.dev/config/
export default defineConfig({
	define: buildVariables(),
	plugins: [react(), splitVendorChunkPlugin(), tsConfigPaths(), injectHTML()],
	server: {
		proxy: {
			"/routes": {
				target: "http://127.0.0.1:8000",
				changeOrigin: true,
			},
		},
	},
	resolve: {
		alias: {
			resolve: {
				alias: {
					"@": path.resolve(__dirname, "./src"),
				},
			},
		},
	},
});


================================================
File: frontend/.env
================================================
DATABUTTON_PROJECT_ID=f4519139-6047-4607-8495-56e8bf9c59ae
DATABUTTON_CUSTOM_DOMAIN=
DATABUTTON_EXTENSIONS=[{"name":"shadcn","version":"1"},{"name":"firebase-auth","version":"1","config":{"firebaseConfig":{"apiKey":"AIzaSyACVfefuOlxyTdWdt4jSj1Sk9KyNCu4NHA","authDomain":"landhacker2-74db3.firebaseapp.com","projectId":"landhacker2-74db3","storageBucket":"landhacker2-74db3.firebasestorage.app","messagingSenderId":"928888376505","appId":"1:928888376505:web:03bb514553a6b19a569f68"},"signInOptions":{"google":true,"email":true,"facebook":false,"twitter":false,"emailAndPassword":false,"magicLink":false},"siteName":"Landglide","signInSuccessUrl":"/","tosLink":"/terms-of-service","privacyPolicyLink":"/privacy-policy"}}]


================================================
File: frontend/.gitignore
================================================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


================================================
File: frontend/src/AppWrapper.tsx
================================================
import { ErrorBoundary } from "react-error-boundary";
import { RouterProvider } from "react-router-dom";
import { router } from "./router";
import { Head } from "./internal-components/Head";
import { ThemeProvider } from "./internal-components/ThemeProvider";
import { DEFAULT_THEME } from "./constants/default-theme";

export const AppWrapper = () => {
	return (
		<ThemeProvider defaultTheme={DEFAULT_THEME}>
			<ErrorBoundary
				fallback={null}
				onError={(error) => {
					console.error(
						"Caught error in AppWrapper",
						error.message,
						error.stack,
					);
				}}
			>
				<RouterProvider router={router} />
				<Head />
			</ErrorBoundary>
		</ThemeProvider>
	);
};


================================================
File: frontend/src/constants.ts
================================================
export enum Mode {
  DEV = "development",
  PROD = "production",
}

interface WithEnvMode {
  readonly env: {
    readonly MODE: Mode;
  };
}

export const mode = (import.meta as unknown as WithEnvMode).env.MODE;

declare const __APP_ID__: string;
export const APP_ID = __APP_ID__;

declare const __API_PATH__: string;
export const API_PATH = __API_PATH__;

declare const __API_URL__: string;
export const API_URL = __API_URL__;

declare const __WS_API_URL__: string;
export const WS_API_URL = __WS_API_URL__;

declare const __APP_BASE_PATH__: string;
export const APP_BASE_PATH = __APP_BASE_PATH__;

declare const __APP_TITLE__: string;
export const APP_TITLE = __APP_TITLE__;

declare const __APP_FAVICON_LIGHT__: string;
export const APP_FAVICON_LIGHT = __APP_FAVICON_LIGHT__;

declare const __APP_FAVICON_DARK__: string;
export const APP_FAVICON_DARK = __APP_FAVICON_DARK__;

declare const __APP_DEPLOY_USERNAME__: string;
export const APP_DEPLOY_USERNAME = __APP_DEPLOY_USERNAME__;

declare const __APP_DEPLOY_APPNAME__: string;
export const APP_DEPLOY_APPNAME = __APP_DEPLOY_APPNAME__;

declare const __APP_DEPLOY_CUSTOM_DOMAIN__: string;
export const APP_DEPLOY_CUSTOM_DOMAIN = __APP_DEPLOY_CUSTOM_DOMAIN__;


================================================
File: frontend/src/fonts.json
================================================
["https://fonts.googleapis.com/css2?family=Inter:wght@300..700&display=swap","https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300..700&display=swap","https://fonts.googleapis.com/css2?family=Inter:wght@300..700&display=swap"]

================================================
File: frontend/src/index.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

body,
html {
  box-sizing: border-box;
  font-family: Inter;;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --background-hex: #ffffff;
    --foreground: 0 0% 0%;
    --foreground-hex: #000000;
    --card: 0 0% 99%;
    --card-hex: #fcfcfc;
    --card-foreground: 0 0% 0%;
    --card-foreground-hex: #000000;
    --popover: 0 0% 100%;
    --popover-hex: #ffffff;
    --popover-foreground: 174 15% 38%;
    --popover-foreground-hex: #53716e;
    --primary: 178 70% 39%;
    --primary-hex: #1ea8a3;
    --primary-foreground: 0 0% 100%;
    --primary-foreground-hex: #ffffff;
    --secondary: 177 36% 72%;
    --secondary-hex: #9dd1ce;
    --secondary-foreground: 0 0% 0%;
    --secondary-foreground-hex: #000000;
    --muted: 0 0% 99%;
    --muted-hex: #fcfcfc;
    --muted-foreground: 0 0% 0%;
    --muted-foreground-hex: #000000;
    --accent: 358 70% 61%;
    --accent-hex: #E1575C;
    --accent-foreground: 0 0% 0%;
    --accent-foreground-hex: #000000;
    --destructive: 5 100% 53%;
    --destructive-hex: #ff2510;
    --destructive-foreground: 0 0% 0%;
    --destructive-foreground-hex: #000000;
    --border: 0 0% 96%;
    --border-hex: #f5f5f5;
    --input: 0 0% 96%;
    --input-hex: #f5f5f5;
    --ring: 178 70% 39%;
    --ring-hex: #1ea8a3;
    --chart-1: 178 70% 39%;
    --chart-1-hex: #1ea8a3;
    --chart-2: 238 70% 39%;
    --chart-2-hex: #1e23a8;
    --chart-3: 358 70% 39%;
    --chart-3-hex: #a81e23;
    --chart-4: 58 70% 39%;
    --chart-4-hex: #a8a31e;
    --chart-5: 358 70% 61%;
    --chart-5-hex: #E1575C;
    --radius: 1.25rem;
  }

  .dark {
    --background: 0 0% 0%;
    --background-hex: #000000;
    --foreground: 0 0% 100%;
    --foreground-hex: #ffffff;
    --card: 0 0% 2%;
    --card-hex: #050505;
    --card-foreground: 0 0% 100%;
    --card-foreground-hex: #ffffff;
    --popover: 0 0% 0%;
    --popover-hex: #000000;
    --popover-foreground: 177 36% 72%;
    --popover-foreground-hex: #9dd1ce;
    --primary: 178 70% 39%;
    --primary-hex: #1ea8a3;
    --primary-foreground: 0 0% 100%;
    --primary-foreground-hex: #ffffff;
    --secondary: 174 15% 38%;
    --secondary-hex: #53716e;
    --secondary-foreground: 0 0% 100%;
    --secondary-foreground-hex: #ffffff;
    --muted: 0 0% 2%;
    --muted-hex: #050505;
    --muted-foreground: 0 0% 100%;
    --muted-foreground-hex: #ffffff;
    --accent: 358 70% 61%;
    --accent-hex: #E1575C;
    --accent-foreground: 0 0% 0%;
    --accent-foreground-hex: #000000;
    --destructive: 0 100% 47%;
    --destructive-hex: #f00000;
    --destructive-foreground: 0 0% 0%;
    --destructive-foreground-hex: #000000;
    --border: 0 0% 22%;
    --border-hex: #373737;
    --input: 0 0% 22%;
    --input-hex: #373737;
    --ring: 178 70% 39%;
    --ring-hex: #1ea8a3;
    --chart-1: 178 70% 39%;
    --chart-1-hex: #1ea8a3;
    --chart-2: 238 70% 39%;
    --chart-2-hex: #1e23a8;
    --chart-3: 358 70% 39%;
    --chart-3-hex: #a81e23;
    --chart-4: 58 70% 39%;
    --chart-4-hex: #a8a31e;
    --chart-5: 358 70% 61%;
    --chart-5-hex: #E1575C;
  }
}

/* Viewport-aware container class */
.app-container {
  /* Fallback for older browsers: */
  height: 100vh;
  width: 100vw;
  /* If supported, use stable viewport units: */
  @supports (height: 100svh) {
    height: 100svh;
    width: 100svw;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

================================================
File: frontend/src/main.tsx
================================================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { AppWrapper } from './AppWrapper.tsx'
import './index.css'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <AppWrapper />
  </StrictMode>,
)


================================================
File: frontend/src/router.tsx
================================================
import { lazy, type ReactNode, Suspense } from "react";
import { createBrowserRouter } from "react-router-dom";
import { userRoutes } from "./user-routes";

export const SuspenseWrapper = ({ children }: { children: ReactNode }) => {
  return <Suspense>{children}</Suspense>;
};

const NotFoundPage = lazy(() => import("./pages/NotFoundPage"));
const SomethingWentWrongPage = lazy(
  () => import("./pages/SomethingWentWrongPage"),
);

export const router = createBrowserRouter(
  [
    ...userRoutes,
    {
      path: "*",
      element: (
        <SuspenseWrapper>
          <NotFoundPage />
        </SuspenseWrapper>
      ),
      errorElement: (
        <SuspenseWrapper>
          <SomethingWentWrongPage />
        </SuspenseWrapper>
      ),
    },
  ]
);

================================================
File: frontend/src/user-routes.tsx
================================================

// THIS FILE IS AUTOGENERATED WHEN PAGES ARE UPDATED
import { lazy } from "react";
import { RouteObject } from "react-router";


import { UserGuard } from "app";


const App = lazy(() => import("./pages/App.tsx"));
const Login = lazy(() => import("./pages/Login.tsx"));
const Logout = lazy(() => import("./pages/Logout.tsx"));

export const userRoutes: RouteObject[] = [

	{ path: "/", element: <UserGuard><App /></UserGuard>},
	{ path: "/login", element: <Login />},
	{ path: "/logout", element: <UserGuard><Logout /></UserGuard>},

];


================================================
File: frontend/src/vite-env.d.ts
================================================
/// <reference types="vite/client" />


================================================
File: frontend/src/app/index.ts
================================================
/*
This file is here for exporting a stable API for users apps.

Usage examples:

  // API endpoints can be called via the backend client
  import { backend, types } from "app";
  const response: types.EndpointExampleResponseType = await backend.endpoint_example({...})

  // API websocket endpoints are reachable at `${WS_API_URL}/endpointname`
  import { WS_API_URL } from "app";
  const socket = new WebSocket(`${WS_API_URL}/endpointname`)

  // API HTTP endpoints are also reachable at `${API_URL}/endpointname`
  import { API_URL } from "app";
*/

export {
  API_URL,
  APP_BASE_PATH,
  APP_ID,
  Mode,
  WS_API_URL,
  mode,
} from "../constants";
export * from "./auth";

import brain from "../brain";
export const backend = brain;

// export * as types from "../brain/data-contracts";


================================================
File: frontend/src/app/.dockerignore
================================================
./auth


================================================
File: frontend/src/app/auth/SignInOrUpForm.tsx
================================================
import {
  EmailAuthProvider,
  FacebookAuthProvider,
  GithubAuthProvider,
  GoogleAuthProvider,
  TwitterAuthProvider,
} from "firebase/auth";
import * as React from "react";
import { useMemo } from "react";
import StyledFirebaseAuth from "react-firebaseui/StyledFirebaseAuth";
import { config } from "./config";
import { firebaseAuth } from "./firebase";

interface Props {
  signInOptions: {
    google?: boolean;
    facebook?: boolean;
    github?: boolean;
    twitter?: boolean;
    emailAndPassword?: boolean;
    magicLink?: boolean;
  };
}

const constructSignInOptions = (signInOptions: Props["signInOptions"]) => {
  const options: firebaseui.auth.Config["signInOptions"] = [];

  if (signInOptions.google) {
    options.push(GoogleAuthProvider.PROVIDER_ID);
  }

  if (signInOptions.facebook) {
    options.push(FacebookAuthProvider.PROVIDER_ID);
  }

  if (signInOptions.github) {
    options.push(GithubAuthProvider.PROVIDER_ID);
  }

  if (signInOptions.twitter) {
    options.push(TwitterAuthProvider.PROVIDER_ID);
  }

  if (signInOptions.emailAndPassword) {
    options.push(EmailAuthProvider.PROVIDER_ID);
  }

  if (signInOptions.magicLink) {
    options.push(EmailAuthProvider.PROVIDER_ID);
  }

  return options;
};

declare const __APP_BASE_PATH__: string;

export const SignInOrUpForm = (props: Props) => {
  const signInOptions = useMemo(
    () => constructSignInOptions(props.signInOptions),
    [props.signInOptions],
  );

  const signInSuccessUrl = useMemo(() => {
    const searchParams = new URLSearchParams(window.location.search);
    const nextUrl = searchParams.get("next");
    const otherParams = new URLSearchParams();

    for (const [key, value] of searchParams.entries()) {
      if (key !== "next") {
        otherParams.append(key, value);
      }
    }

    const successUrl = nextUrl
      ? `${nextUrl}${otherParams.toString() ? `?${otherParams.toString()}` : ""}`
      : `${config.signInSuccessUrl}`;

    return `${__APP_BASE_PATH__}/${successUrl}`.replace(/\/+/g, "/");
  }, []);

  const openPrivacyPolicyUrl = config.privacyPolicyLink
    ? () => {
        const privacyPolicyLink = config.privacyPolicyLink?.startsWith("/")
          ? `${__APP_BASE_PATH__}/${config.privacyPolicyLink}`
          : config.privacyPolicyLink;

        window.open(privacyPolicyLink, "_blank");
      }
    : undefined;

  const openTosUrl = config.tosLink
    ? () => {
        const tosLink = config.tosLink?.startsWith("/")
          ? `${__APP_BASE_PATH__}/${config.tosLink}`
          : config.tosLink;

        window.open(tosLink, "_blank");
      }
    : undefined;

  return (
    <StyledFirebaseAuth
      firebaseAuth={firebaseAuth}
      uiConfig={{
        signInFlow: "popup",
        autoUpgradeAnonymousUsers: true,
        signInOptions,
        signInSuccessUrl,
        siteName: config.siteName,
        callbacks: {
          signInFailure: (error) => {
            throw error;
          },
        },
        privacyPolicyUrl: openPrivacyPolicyUrl,
        tosUrl: openTosUrl,
      }}
    />
  );
};


================================================
File: frontend/src/app/auth/UserGuard.tsx
================================================
import type { User } from "firebase/auth";
import * as React from "react";
import { createContext, useContext } from "react";
import { Navigate, useLocation } from "react-router-dom";
import { useCurrentUser } from "./useCurrentUser";

type UserGuardContextType = {
  user: User;
};

const UserGuardContext = createContext<UserGuardContextType | undefined>(
  undefined,
);

/**
 * Hook to access the logged in user from within a <UserGuard> component.
 */
export const useUserGuardContext = () => {
  const context = useContext(UserGuardContext);

  if (context === undefined) {
    throw new Error("useUserGuardContext must be used within a <UserGuard>");
  }

  return context;
};

/**
 * All protected routes are wrapped in a UserGuard component.
 */
export const UserGuard = (props: {
  children: React.ReactNode;
}) => {
  const { user, loading } = useCurrentUser();
  const { pathname } = useLocation();

  if (loading) {
    return <React.Fragment />;
  }

  if (!user) {
    const queryParams = new URLSearchParams(window.location.search);

    queryParams.set("next", pathname);

    const queryString = queryParams.toString();

    return <Navigate to={`/login?${queryString}`} replace={true} />;
  }

  return (
    <UserGuardContext.Provider value={{ user }}>
      {props.children}
    </UserGuardContext.Provider>
  );
};


================================================
File: frontend/src/app/auth/auth.ts
================================================
import {
  type AuthCredential,
  GoogleAuthProvider,
  type User,
  type UserCredential,
  type UserInfo,
  sendEmailVerification as firebaseSendEmailVerification,
  sendPasswordResetEmail as firebaseSendPasswordResetEmail,
  signOut as firebaseSignOut,
  reauthenticateWithCredential,
  signInWithPopup,
  updateEmail,
  updatePassword,
  updateProfile,
} from "firebase/auth";
import { firebaseAuth } from "./firebase";

const validateConfig = () => {
  console.log("Firebase auth extension enabled");
};

/**
 * Sign in with Google popup.
 *
 * TODO: Set providers based on config
 */
const signInWithGoogle = async (): Promise<UserCredential | null> => {
  const provider = new GoogleAuthProvider();
  provider.addScope("https://www.googleapis.com/auth/userinfo.profile");

  return signInWithPopup(firebaseAuth, provider);
};

/**
 * Sign out the user.
 */
const signOut = async (): Promise<void> => {
  return firebaseSignOut(firebaseAuth);
};

/**
 * Returns the logged in user if logged in, otherwise null.
 */
const getCurrentUser = (): User | null => {
  return firebaseAuth.currentUser;
};

/**
 * Updates the display name or photo URL of the current user.
 *
 * https://firebase.google.com/docs/auth/web/manage-users#update_a_users_profile
 */
const updateCurrentUser = async (
  user: User,
  payload: Partial<Pick<UserInfo, "displayName" | "photoURL">>,
) => {
  return updateProfile(user, payload);
};

/**
 * Updates the email of the current user.
 */
const updateCurrentUserEmail = async (user: User, email: string) => {
  return updateEmail(user, email);
};

/**
 * Sends an email verification to the current user.
 */
const sendEmailVerification = async (user: User) => {
  return firebaseSendEmailVerification(user);
};

/**
 * Updates the password of the current user.
 */
const updateCurrentUserPassword = async (user: User, newPassword: string) => {
  return updatePassword(user, newPassword);
};

/**
 * Sends a password reset email to the current user.
 */
const sendPasswordResetEmail = async (email: string) => {
  return firebaseSendPasswordResetEmail(firebaseAuth, email);
};

/**
 * Reauthenticates the current user with credentials for
 * security sensitive operations.
 */
const reauthenticateUser = async (user: User, credential: AuthCredential) => {
  return reauthenticateWithCredential(user, credential);
};

const getAuthToken = async (): Promise<string | null> => {
  return firebaseAuth.currentUser?.getIdToken() ?? null;
};

const getAuthHeaderValue = async (): Promise<string> => {
  const idToken = await getAuthToken();
  return `Bearer ${idToken ?? ""}`;
};

export const auth = {
  getAuthHeaderValue,
  getAuthToken,
  getCurrentUser,
  reauthenticateUser,
  sendEmailVerification,
  sendPasswordResetEmail,
  signInWithGoogle,
  signOut,
  updateCurrentUser,
  updateCurrentUserEmail,
  updateCurrentUserPassword,
  validateConfig,
};


================================================
File: frontend/src/app/auth/config.ts
================================================
import { z } from "zod";

const configSchema = z.object({
  signInOptions: z.object({
    google: z.coerce.boolean({
      description: "Enable Google sign-in",
    }),
    github: z.coerce.boolean({ description: "Enable GitHub sign-in" }),
    facebook: z.coerce.boolean({ description: "Enable Facebook sign-in" }),
    twitter: z.coerce.boolean({ description: "Enable Twitter sign-in" }),
    emailAndPassword: z.coerce.boolean({
      description: "Enable email and password sign-in",
    }),
    magicLink: z.coerce.boolean({
      description: "Enable magic link sign-in",
    }),
  }),
  siteName: z.string({
    description: "The name of the site",
  }),
  signInSuccessUrl: z.preprocess(
    (it) => it || "/",
    z.string({
      description: "The URL to redirect to after a successful sign-in",
    }),
  ),
  tosLink: z
    .string({
      description: "Link to the terms of service",
    })
    .optional(),
  privacyPolicyLink: z
    .string({
      description: "Link to the privacy policy",
    })
    .optional(),
  firebaseConfig: z.object(
    {
      apiKey: z.string(),
      authDomain: z.string(),
      projectId: z.string(),
      storageBucket: z.string(),
      messagingSenderId: z.string(),
      appId: z.string(),
    },
    {
      description:
        "Firebase config as as describe in https://firebase.google.com/docs/web/learn-more#config-object",
    },
  ),
});

type FirebaseExtensionConfig = z.infer<typeof configSchema>;

// This is set by vite.config.ts
declare const __FIREBASE_CONFIG__: string;

export const config: FirebaseExtensionConfig = configSchema.parse(
  JSON.parse(__FIREBASE_CONFIG__),
);


================================================
File: frontend/src/app/auth/firebase.ts
================================================
import { type FirebaseApp, initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { config } from "./config";

// Export the firebase app instance in case it's needed by other modules.
export const firebaseApp: FirebaseApp = initializeApp(config.firebaseConfig);

// Export the firebase auth instance
export const firebaseAuth = getAuth(firebaseApp);


================================================
File: frontend/src/app/auth/index.ts
================================================
export * from "./auth";
export * from "./firebase";
export * from "./SignInOrUpForm";
export * from "./useCurrentUser";
export * from "./UserGuard";


================================================
File: frontend/src/app/auth/useCurrentUser.ts
================================================
import type { User } from "firebase/auth";
import { useEffect, useState } from "react";
import { firebaseAuth } from "./firebase";

/**
 * Hook to subscribe to the current user.
 * Returns the current user if logged in, otherwise null.
 *
 * If within a UserGuard it is recommended to use useUserGuardContext instead.
 */
export const useCurrentUser = (): {
  user: User | null;
  loading: boolean;
} => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = firebaseAuth.onAuthStateChanged((user: User | null) => {
      setUser(user);
      setLoading(false);
    });

    return () => {
      unsubscribe();
    };
  }, []);

  return { user, loading };
};


================================================
File: frontend/src/brain/Brain.ts
================================================
import {
  AcrePricesRequest,
  CheckHealthData,
  CreateCheckoutSession,
  CreateCheckoutSessionData,
  CreateCheckoutSessionError,
  DistanceRequest,
  GetAcresPricesData,
  GetAcresPricesError,
  GetDistanceToCityData,
  GetDistanceToCityError,
  GetPriceEstimatesData,
  GetPriceEstimatesError,
  PredictPriceData,
  PredictPriceError,
  PricePredictionRequest,
  ScrapingRequest,
  StripeWebhookData,
  TestStripeConnectionData,
} from "./data-contracts";
import { ContentType, HttpClient, RequestParams } from "./http-client";

export class Brain<SecurityDataType = unknown> extends HttpClient<SecurityDataType> {
  /**
   * @description Check health of application. Returns 200 when OK, 500 when not.
   *
   * @name check_health
   * @summary Check Health
   * @request GET:/_healthz
   */
  check_health = (params: RequestParams = {}) =>
    this.request<CheckHealthData, any>({
      path: `/_healthz`,
      method: "GET",
      ...params,
    });

  /**
   * @description Test the Stripe connection and list products
   *
   * @tags dbtn/module:payments
   * @name test_stripe_connection
   * @summary Test Stripe Connection
   * @request GET:/routes/test-stripe-connection
   */
  test_stripe_connection = (params: RequestParams = {}) =>
    this.request<TestStripeConnectionData, any>({
      path: `/routes/test-stripe-connection`,
      method: "GET",
      ...params,
    });

  /**
   * @description Create a Stripe Checkout session
   *
   * @tags dbtn/module:payments
   * @name create_checkout_session
   * @summary Create Checkout Session
   * @request POST:/routes/create-checkout
   */
  create_checkout_session = (data: CreateCheckoutSession, params: RequestParams = {}) =>
    this.request<CreateCheckoutSessionData, CreateCheckoutSessionError>({
      path: `/routes/create-checkout`,
      method: "POST",
      body: data,
      type: ContentType.Json,
      ...params,
    });

  /**
   * No description
   *
   * @tags dbtn/module:payments
   * @name stripe_webhook
   * @summary Stripe Webhook
   * @request POST:/routes/webhook
   */
  stripe_webhook = (params: RequestParams = {}) =>
    this.request<StripeWebhookData, any>({
      path: `/routes/webhook`,
      method: "POST",
      ...params,
    });

  /**
   * No description
   *
   * @tags dbtn/module:scrape, dbtn/hasAuth
   * @name predict_price
   * @summary Predict Price
   * @request POST:/routes/scrape/predict-price
   */
  predict_price = (data: PricePredictionRequest, params: RequestParams = {}) =>
    this.request<PredictPriceData, PredictPriceError>({
      path: `/routes/scrape/predict-price`,
      method: "POST",
      body: data,
      type: ContentType.Json,
      ...params,
    });

  /**
   * @description Get price estimates from various sources for a property using Firecrawl for extraction
   *
   * @tags dbtn/module:scrape, dbtn/hasAuth
   * @name get_price_estimates
   * @summary Get Price Estimates
   * @request POST:/routes/scrape/estimates
   */
  get_price_estimates = (data: ScrapingRequest, params: RequestParams = {}) =>
    this.request<GetPriceEstimatesData, GetPriceEstimatesError>({
      path: `/routes/scrape/estimates`,
      method: "POST",
      body: data,
      type: ContentType.Json,
      ...params,
    });

  /**
   * @description Get land prices for a specific acre range in a city
   *
   * @tags dbtn/module:scrape, dbtn/hasAuth
   * @name get_acres_prices
   * @summary Get Acres Prices
   * @request POST:/routes/scrape/acres-prices
   */
  get_acres_prices = (data: AcrePricesRequest, params: RequestParams = {}) =>
    this.request<GetAcresPricesData, GetAcresPricesError>({
      path: `/routes/scrape/acres-prices`,
      method: "POST",
      body: data,
      type: ContentType.Json,
      ...params,
    });

  /**
   * @description Get the distance and duration to a city using Google Maps Distance Matrix API
   *
   * @tags dbtn/module:other_data, dbtn/hasAuth
   * @name get_distance_to_city
   * @summary Get Distance To City
   * @request POST:/routes/distance-to-city
   */
  get_distance_to_city = (data: DistanceRequest, params: RequestParams = {}) =>
    this.request<GetDistanceToCityData, GetDistanceToCityError>({
      path: `/routes/distance-to-city`,
      method: "POST",
      body: data,
      type: ContentType.Json,
      ...params,
    });
}


================================================
File: frontend/src/brain/BrainRoute.ts
================================================
import {
  AcrePricesRequest,
  CheckHealthData,
  CreateCheckoutSession,
  CreateCheckoutSessionData,
  DistanceRequest,
  GetAcresPricesData,
  GetDistanceToCityData,
  GetPriceEstimatesData,
  PredictPriceData,
  PricePredictionRequest,
  ScrapingRequest,
  StripeWebhookData,
  TestStripeConnectionData,
} from "./data-contracts";

export namespace Brain {
  /**
   * @description Check health of application. Returns 200 when OK, 500 when not.
   * @name check_health
   * @summary Check Health
   * @request GET:/_healthz
   */
  export namespace check_health {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = CheckHealthData;
  }

  /**
   * @description Test the Stripe connection and list products
   * @tags dbtn/module:payments
   * @name test_stripe_connection
   * @summary Test Stripe Connection
   * @request GET:/routes/test-stripe-connection
   */
  export namespace test_stripe_connection {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = TestStripeConnectionData;
  }

  /**
   * @description Create a Stripe Checkout session
   * @tags dbtn/module:payments
   * @name create_checkout_session
   * @summary Create Checkout Session
   * @request POST:/routes/create-checkout
   */
  export namespace create_checkout_session {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = CreateCheckoutSession;
    export type RequestHeaders = {};
    export type ResponseBody = CreateCheckoutSessionData;
  }

  /**
   * No description
   * @tags dbtn/module:payments
   * @name stripe_webhook
   * @summary Stripe Webhook
   * @request POST:/routes/webhook
   */
  export namespace stripe_webhook {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = StripeWebhookData;
  }

  /**
   * No description
   * @tags dbtn/module:scrape, dbtn/hasAuth
   * @name predict_price
   * @summary Predict Price
   * @request POST:/routes/scrape/predict-price
   */
  export namespace predict_price {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = PricePredictionRequest;
    export type RequestHeaders = {};
    export type ResponseBody = PredictPriceData;
  }

  /**
   * @description Get price estimates from various sources for a property using Firecrawl for extraction
   * @tags dbtn/module:scrape, dbtn/hasAuth
   * @name get_price_estimates
   * @summary Get Price Estimates
   * @request POST:/routes/scrape/estimates
   */
  export namespace get_price_estimates {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = ScrapingRequest;
    export type RequestHeaders = {};
    export type ResponseBody = GetPriceEstimatesData;
  }

  /**
   * @description Get land prices for a specific acre range in a city
   * @tags dbtn/module:scrape, dbtn/hasAuth
   * @name get_acres_prices
   * @summary Get Acres Prices
   * @request POST:/routes/scrape/acres-prices
   */
  export namespace get_acres_prices {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = AcrePricesRequest;
    export type RequestHeaders = {};
    export type ResponseBody = GetAcresPricesData;
  }

  /**
   * @description Get the distance and duration to a city using Google Maps Distance Matrix API
   * @tags dbtn/module:other_data, dbtn/hasAuth
   * @name get_distance_to_city
   * @summary Get Distance To City
   * @request POST:/routes/distance-to-city
   */
  export namespace get_distance_to_city {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = DistanceRequest;
    export type RequestHeaders = {};
    export type ResponseBody = GetDistanceToCityData;
  }
}


================================================
File: frontend/src/brain/data-contracts.ts
================================================
/** AcrePriceData */
export interface AcrePriceData {
  /** Acre */
  acre?: number | null;
  /** Price */
  price?: number | null;
  /** Address */
  address?: string | null;
}

/** AcrePricesRequest */
export interface AcrePricesRequest {
  /** City */
  city: string;
  /** Acres */
  acres: number;
  /** Zip Code */
  zip_code: string;
}

/** AcrePricesResponse */
export interface AcrePricesResponse {
  /** Prices */
  prices: AcrePriceData[];
}

/** CreateCheckoutSession */
export interface CreateCheckoutSession {
  /** Price Id */
  price_id: string;
  /** Success Url */
  success_url: string;
  /** Cancel Url */
  cancel_url: string;
}

/** DistanceRequest */
export interface DistanceRequest {
  /** Origins */
  origins: string;
  /** Destination */
  destination: string;
}

/** DistanceResponse */
export interface DistanceResponse {
  /** Distance Text */
  distance_text: string;
  /** Distance Value */
  distance_value: number;
  /** Duration Text */
  duration_text: string;
  /** Duration Value */
  duration_value: number;
}

/**
 * FirecrawlPrice
 * Base model matching Firecrawl's price extraction schema
 */
export interface FirecrawlPrice {
  /** Url */
  url?: string | null;
  /** Price */
  price?: string | null;
  /** Website Name */
  website_name?: string | null;
}

/** HTTPValidationError */
export interface HTTPValidationError {
  /** Detail */
  detail?: ValidationError[];
}

/** HealthResponse */
export interface HealthResponse {
  /** Status */
  status: string;
}

/** PricePredictionRequest */
export interface PricePredictionRequest {
  /** Address */
  address: string;
  /** Pricecomparisons */
  priceComparisons: FirecrawlPrice[];
}

/** PricePredictionResponse */
export interface PricePredictionResponse {
  /** Predicted Price */
  predicted_price: string;
  /** Confidence Score */
  confidence_score: string;
  /** Reasoning */
  reasoning: string;
}

/** ScrapingRequest */
export interface ScrapingRequest {
  /** Address */
  address: string;
  /** City */
  city: string;
  /** State */
  state: string;
}

/** ValidationError */
export interface ValidationError {
  /** Location */
  loc: (string | number)[];
  /** Message */
  msg: string;
  /** Error Type */
  type: string;
}

export type CheckHealthData = HealthResponse;

export type TestStripeConnectionData = any;

export type CreateCheckoutSessionData = any;

export type CreateCheckoutSessionError = HTTPValidationError;

export type StripeWebhookData = any;

export type PredictPriceData = PricePredictionResponse;

export type PredictPriceError = HTTPValidationError;

/** Response Get Price Estimates */
export type GetPriceEstimatesData = FirecrawlPrice[];

export type GetPriceEstimatesError = HTTPValidationError;

export type GetAcresPricesData = AcrePricesResponse;

export type GetAcresPricesError = HTTPValidationError;

export type GetDistanceToCityData = DistanceResponse;

export type GetDistanceToCityError = HTTPValidationError;


================================================
File: frontend/src/brain/http-client.ts
================================================
export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
  json: () => Promise<D>;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return `${encodedKey}=${encodeURIComponent(typeof value === "number" ? value : `${value}`)}`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? `?${queryString}` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];

        if (Array.isArray(property)) {
          for (const it of property) {
            formData.append(
              key,
              it instanceof Blob ? it : typeof it === "object" && it !== null ? JSON.stringify(it) : `${it}`,
            );
          }
        } else {
          formData.append(
            key,
            property instanceof Blob
              ? property
              : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : `${property}`,
          );
        }

        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(`${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };

  public async *requestStream<T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): AsyncIterable<T> {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];

    let response;
    try {
      response = await this.customFetch(
        `${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`,
        {
          ...requestParams,
          headers: {
            ...(requestParams.headers || {}),
            ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
          },
          signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
          body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
        },
      );

      if (!response.ok) {
        throw new Error("Response not OK");
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      const contentType = response.headers.get("Content-Type");

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        let chunk = decoder.decode(value, { stream: true });

        let data;
        if (contentType === "application/json") {
          let chunk = decoder.decode(value, { stream: true });
          try {
            data = JSON.parse(chunk);
          } catch (error) {
            throw new Error(error);
            continue;
          }
        } else if (contentType === "application/octet-stream") {
          data = new Uint8Array(value);
        } else {
          let chunk = decoder.decode(value, { stream: true });
          data = chunk;
        }

        yield data as T;
      }
    } catch (error) {
      throw new Error(error);
    } finally {
      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }
    }
  }
}


================================================
File: frontend/src/brain/index.ts
================================================
import { auth } from "app/auth";
import { API_PATH } from "../constants";
import { Brain } from "./Brain";
import type { RequestParams } from "./http-client";

const isLocalhost = /localhost:\d{4}/i.test(window.location.origin);

const constructBaseUrl = (): string => {
  if (isLocalhost) {
    return `${window.location.origin}${API_PATH}`;
  }

  return `https://api.databutton.com${API_PATH}`;
};

type BaseApiParams = Omit<RequestParams, "signal" | "baseUrl" | "cancelToken">;

const constructBaseApiParams = (): BaseApiParams => {
  return {
    credentials: "include",
    secure: true,
  };
};

const constructClient = () => {
  const baseUrl = constructBaseUrl();
  const baseApiParams = constructBaseApiParams();

  return new Brain({
    baseUrl,
    baseApiParams,
    securityWorker: async () => {
      return {
        headers: {
          Authorization: await auth.getAuthHeaderValue(),
        },
      };
    },
  });
};

const brain = constructClient();

export default brain;


================================================
File: frontend/src/components/GeneratePrice.tsx
================================================
import { useState, useEffect } from "react";
import ReactMarkdown from "react-markdown";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CoinsIcon, Loader2, Check, DollarSign, AlertTriangle } from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import brain from "brain";
import type { PropertyDetailsResponse } from "types";
import { useAppStore } from "@/utils/store";
import { useUserGuardContext, firebaseApp, APP_BASE_PATH } from "app";
import { savePropertyQuery, decreaseCredits } from "@/utils/firebase";

// Helper functions for price calculations
const calculatePriceStats = (acrePrices: NonNullable<PropertyDetailsResponse['acre_prices']>) => {
  if (!acrePrices.length) return null;

  // Calculate price per acre for each property
  const pricesPerAcre = acrePrices
    .filter(p => p.price && p.acre) // Filter out invalid entries
    .map(p => p.price! / p.acre!);

  if (!pricesPerAcre.length) return null;

  // Similarity clustering with a threshold of 25%
  const similarityThreshold = 0.25; // 25% threshold for similarity
  const clusters: number[][] = [];

  // Create a copy of prices for processing
  const remainingPrices = [...pricesPerAcre];
  
  // Build clusters
  while (remainingPrices.length > 0) {
    const currentPrice = remainingPrices.shift()!;
    const currentCluster: number[] = [currentPrice];
    
    // Find all prices within threshold of current price
    for (let i = remainingPrices.length - 1; i >= 0; i--) {
      const price = remainingPrices[i];
      const percentDiff = Math.abs(price - currentPrice) / currentPrice;
      
      if (percentDiff <= similarityThreshold) {
        currentCluster.push(price);
        remainingPrices.splice(i, 1);
      }
    }
    
    clusters.push(currentCluster);
  }
  
  // Sort clusters by size (largest first)
  clusters.sort((a, b) => b.length - a.length);
  
  // Use the largest cluster for calculations
  const largestCluster = clusters[0];
  const otherCount = pricesPerAcre.length - largestCluster.length;
  
  // Calculate statistics using only the largest cluster
  const mean = largestCluster.reduce((a, b) => a + b, 0) / largestCluster.length;
  const variance = largestCluster.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / largestCluster.length;
  const stdDev = Math.sqrt(variance);
  const cv = stdDev / mean; // Coefficient of variation

  // Additional info about clusters
  const numClusters = clusters.length;
  const clusterSizes = clusters.map(c => c.length).join(', ');

  return {
    mean,
    stdDev,
    cv,
    min: Math.min(...largestCluster),
    max: Math.max(...largestCluster),
    count: largestCluster.length,
    totalCount: pricesPerAcre.length,
    outliers: otherCount,
    numClusters,
    clusterSizes
  };
};

const formatCurrency = (value: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    maximumFractionDigits: 0
  }).format(value);
};

interface PredictedPrice {
  predicted_price: string;
  confidence_score: string;
  reasoning: string;
}

export function GeneratePrice() {
  const { selectedProperty, runningProperties, addRunningProperty, removeRunningProperty, setSelectedProperty, userProfile, isLoadingProfile, initializeUserProfileListener } = useAppStore();
  const { user } = useUserGuardContext();

  const [isGenerating, setIsGenerating] = useState(false);
  // const [isFetchingPrices, setIsFetchingPrices] = useState(false);
  const [showAnalysis, setShowAnalysis] = useState(false);
  // const [priceEstimates, setPriceEstimates] = useState<FirecrawlPrice[]>([]);
  const [predictedPrice, setPredictedPrice] = useState<PredictedPrice | null>(null);
  const [isPredicting, setIsPredicting] = useState(false);
  const [savedDocId, setSavedDocId] = useState<string | null>(null);
  const [acrePrices, setAcrePrices] = useState<PropertyDetailsResponse['acre_prices']>([]);
  const [isFetchingAcrePrices, setIsFetchingAcrePrices] = useState(false);

  // Listen for user profile changes
  useEffect(() => {
    if (!user) return;
    const unsubscribe = initializeUserProfileListener(user.uid);
    return () => unsubscribe();
  }, [user, initializeUserProfileListener]);

  // Initialize state if property has existing price data
  useEffect(() => {

    if (selectedProperty?.acre_prices) {
      setShowAnalysis(true);
      setAcrePrices(selectedProperty.acre_prices);

      if (selectedProperty.predicted_price && selectedProperty.confidence_score && selectedProperty.price_reasoning) {
        setPredictedPrice({
          predicted_price: selectedProperty.predicted_price,
          confidence_score: selectedProperty.confidence_score,
          reasoning: selectedProperty.price_reasoning,
        });
      }
    }
  }, [selectedProperty]);

  if (!selectedProperty?.address) return null;

  const address = `${selectedProperty.address.streetAddress}, ${selectedProperty.address.city}, ${selectedProperty.address.state} ${selectedProperty.address.zipcode}`;
  const isPropertyInProgress = runningProperties.includes(address);

  const handleGenerate = async () => {
    addRunningProperty(address);
    setIsGenerating(true);
    // setIsFetchingPrices(true);
    setShowAnalysis(true);

    let finalAcrePrices = [];

    try {
      // Get acre prices for properties in the area
      setIsFetchingAcrePrices(true);
      if (!selectedProperty.address.zipcode) {
        throw new Error("Missing zip code for property");
      }

      const acrePricesResponse = await brain.get_acres_prices({
        city: selectedProperty.address.city,
        acres: selectedProperty.gisArea || 10, // Use GIS area or default to 10 acres
        zip_code: selectedProperty.address.zipcode
      });
      const acrePricesData = await acrePricesResponse.json();
      setAcrePrices(acrePricesData.prices);
      finalAcrePrices = acrePricesData.prices;
    } catch (error) {
      console.error("Error getting acre prices:", error);
    } finally {
      setIsFetchingAcrePrices(false);
      setIsGenerating(false);
    }

    // Calculate predicted price based on acre prices
    setIsPredicting(true);
    try {
      const stats = calculatePriceStats(finalAcrePrices);
      
      if (!stats || !selectedProperty.gisArea) {
        throw new Error("Insufficient data for prediction");
      }

      // Calculate predicted price
      const predictedValue = stats.mean * selectedProperty.gisArea;
      
      // Calculate confidence score (0-100)
      // Lower CV = higher confidence
      // CV of 0.5 or higher = 0% confidence
      // CV of 0 = 100% confidence
      const confidence = Math.max(0, Math.min(100, (1 - stats.cv * 2) * 100));
      
      // Generate reasoning
      const reasoning = `Analysis based on the largest cluster of similar properties (${stats.count} of ${stats.totalCount} properties) in ${selectedProperty.address.city.toUpperCase()}:  

• Average price per acre: ${formatCurrency(stats.mean)}  
• Range within cluster: ${formatCurrency(stats.min)} to ${formatCurrency(stats.max)} per acre  
• Price variation: ${(stats.cv * 100).toFixed(1)}%  
• Your property: ${selectedProperty.gisArea.toFixed(2)} acres  
• Outliers excluded: ${stats.outliers} properties  

This estimate uses similarity clustering to group properties with similar prices per acre (within 25% of each other) and selects the largest cluster for analysis. This ensures your estimate is based on the most common price pattern in the market, ignoring outliers. The coefficient of variation (${(stats.cv * 100).toFixed(1)}%) indicates the spread of prices within the cluster - a lower percentage suggests more consistent pricing.`;

      setPredictedPrice({
        predicted_price: formatCurrency(predictedValue),
        confidence_score: confidence.toFixed(0),
        reasoning: reasoning
      });
  
      // Update property with prediction and comparisons
      const updatedProperty = {
        ...selectedProperty,
        // priceComparisons: finalPriceEstimates,
        predicted_price: formatCurrency(predictedValue),
        confidence_score: confidence.toFixed(0),
        price_reasoning: reasoning,
        acre_prices: finalAcrePrices,
      };

      // Auto-save the property and decrease credits
      const docId = await savePropertyQuery(user.uid, updatedProperty);
      setSavedDocId(docId);
      await decreaseCredits(user.uid);
      setSelectedProperty(updatedProperty);
    } catch (error) {
      console.error("Error predicting price or saving property:", error);
      // Even if saving fails, update the state
      setSelectedProperty({
        ...selectedProperty,

      });
    } finally {
      setIsPredicting(false);
      removeRunningProperty(address);
    }
  };

  return (
    <div className="space-y-8 w-full max-w-[100%] overflow-hidden">
      {/* Market Value - Only show if exists */}
      {selectedProperty.marketValue && (
        <div className="space-y-4">
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
            <div className="flex items-center gap-2 p-4 border-b">
              <div className="h-6 w-6 flex items-center justify-center rounded-full bg-primary/10">
                <DollarSign className="h-4 w-4" />
              </div>
              <h4 className="text-base font-semibold">Market Value</h4>
            </div>
            <div className="p-6">
              <div className="text-3xl font-bold text-center">
                ${selectedProperty.marketValue.toLocaleString()}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Land Value - Only show if exists */}
      {selectedProperty.landValue && (
        <div className="space-y-4">
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
            <div className="flex items-center gap-2 p-4 border-b">
              <div className="h-6 w-6 flex items-center justify-center rounded-full bg-primary/10">
                <DollarSign className="h-4 w-4" />
              </div>
              <h4 className="text-base font-semibold">Land Value</h4>
            </div>
            <div className="p-6">
              <div className="text-3xl font-bold text-center">
                ${selectedProperty.landValue.toLocaleString()}
              </div>
            </div>
          </div>
        </div>
      )}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Generate Price</h3>
        {!showAnalysis && (
          <div className="flex flex-col items-center gap-4">
            {userProfile?.credits === 0 && (
              <Alert variant="destructive" className="max-w-sm">
                <CoinsIcon className="h-4 w-4" />
                <AlertDescription>
                  You're out of credits. Purchase more credits to continue analyzing properties.
                </AlertDescription>
              </Alert>
            )}
            {userProfile?.credits < 50 ? (
              <Alert variant="warning" className="max-w-sm bg-amber-500/20 text-amber-500 border-amber-500">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  You need at least 50 tokens to generate a price analysis. Please purchase more tokens.
                </AlertDescription>
              </Alert>
            ) : (
              <Button 
                onClick={handleGenerate} 
                disabled={isPropertyInProgress || userProfile?.credits === 0 || isLoadingProfile}
                className="w-full max-w-sm"
              >
                {isPropertyInProgress ? "Generating..." : "Generate"}
              </Button>
            )}
          </div>
        )}
      </div>



      {/* Acre Prices */}
      {showAnalysis && (
        isFetchingAcrePrices ? (
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
            <div className="flex items-center gap-2 p-4 border-b">
              <div className="h-6 w-6 flex items-center justify-center rounded-full bg-primary/10">
                <Loader2 className="h-4 w-4 animate-spin" />
              </div>
              <h4 className="text-base font-semibold">Loading Comparable Properties</h4>
            </div>
            <div className="p-6">
              <div className="overflow-x-auto w-[min(63vw,600px)]">
                <Table>
                  <TableHeader>
                    <TableRow className="hover:bg-transparent">
                      <TableHead className="text-muted-foreground">Address</TableHead>
                      <TableHead className="text-right text-muted-foreground">Size (Acres)</TableHead>
                      <TableHead className="text-right text-muted-foreground">Price (USD)</TableHead>
                      <TableHead className="text-right text-muted-foreground">Price/Acre</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {[1, 2, 3].map((_, index) => (
                      <TableRow key={index} className="hover:bg-transparent">
                        <TableCell><Skeleton className="h-4 w-48" /></TableCell>
                        <TableCell className="text-right"><Skeleton className="h-4 w-20 ml-auto" /></TableCell>
                        <TableCell className="text-right"><Skeleton className="h-4 w-24 ml-auto" /></TableCell>
                        <TableCell className="text-right"><Skeleton className="h-4 w-24 ml-auto" /></TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </div>
          </div>
        ) : !acrePrices ? null : acrePrices.length === 0 ? (
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
            <div className="flex items-center gap-2 p-4 border-b">
              <div className="h-6 w-6 flex items-center justify-center rounded-full bg-destructive/10">
                <AlertTriangle className="h-4 w-4 text-destructive" />
              </div>
              <h4 className="text-base font-semibold">No Properties Found</h4>
            </div>
            <div className="p-6">
              <p className="text-sm text-muted-foreground">
                Unable to find properties for sale nearby to estimate price.
              </p>
            </div>
          </div>
        ) : (
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
            <div className="flex items-center gap-2 p-4 border-b">
              <div className="h-6 w-6 flex items-center justify-center rounded-full bg-primary/10">
                <Check className="h-4 w-4" />
              </div>
              <h4 className="text-base font-semibold">Comparable Properties</h4>
            </div>
            <div className="p-6">
              <div className="overflow-x-auto w-[min(63vw,400px)]">
                <Table>
                  <TableHeader>
                    <TableRow className="hover:bg-transparent">
                      <TableHead className="text-muted-foreground">Address</TableHead>
                      <TableHead className="text-right text-muted-foreground">Size (Acres)</TableHead>
                      <TableHead className="text-right text-muted-foreground">Price (USD)</TableHead>
                      <TableHead className="text-right text-muted-foreground">Price/Acre</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {acrePrices.map((property, index) => (
                      <TableRow key={index} className="hover:bg-transparent">
                        <TableCell className="font-medium break-words whitespace-normal">
                          {property.address || 'Unknown'}
                        </TableCell>
                        <TableCell className="text-right">
                          {property.acre?.toLocaleString() || '-'}
                        </TableCell>
                        <TableCell className="text-right">
                          ${property.price?.toLocaleString() || '-'}
                        </TableCell>
                        <TableCell className="text-right">
                          {property.acre && property.price
                            ? `$${Math.round(property.price / property.acre).toLocaleString()}`
                            : '-'}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </div>
          </div>
        )
      )}



      {/* Predicted Price */}
      {showAnalysis && (
        isPredicting || isPropertyInProgress ? (
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
            <div className="flex items-center gap-2 p-4 border-b">
              <div className="h-6 w-6 flex items-center justify-center rounded-full bg-primary/10">
                <Loader2 className="h-4 w-4 animate-spin" />
              </div>
              <h4 className="text-base font-semibold">Predicting Price</h4>
            </div>
            <div className="p-6">
              <p className="text-sm text-muted-foreground">
                Analyzing market data and comparable properties...
              </p>
            </div>
          </div>
        ) : predictedPrice && (
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
            <div className="flex items-center gap-2 p-4 border-b">
              <div className="h-6 w-6 flex items-center justify-center rounded-full bg-primary/10">
                <DollarSign className="h-4 w-4" />
              </div>
              <h4 className="text-base font-semibold">Predicted Price</h4>
            </div>
            <div className="p-6 space-y-4">
              <div className="flex flex-col items-center gap-2 text-center">
                <span className="text-3xl font-bold">{predictedPrice.predicted_price}</span>
                {/* Confidence score hidden
                <Badge variant={parseFloat(predictedPrice.confidence_score) > 0.7 ? "default" : "secondary"}>
                  {predictedPrice.confidence_score}% confidence
                </Badge>
                */}
              </div>
              <div className="prose prose-invert max-w-none text-sm overflow-x-auto overflow-y-visible break-words">
                <ReactMarkdown>{predictedPrice.reasoning}</ReactMarkdown>
              </div>
            </div>
          </div>
        )
      )}

      {/* Share and Regenerate Buttons */}
      {selectedProperty.predicted_price && !isPropertyInProgress && (
        <div className="flex justify-center gap-4">
          <Button
            variant="outline"
            onClick={handleGenerate}
            disabled={isPropertyInProgress || userProfile?.credits === 0 || isLoadingProfile}
          >
            {isPropertyInProgress ? "Regenerating..." : "Regenerate"}
          </Button>
          <Button
            onClick={async () => {
              const shareUrl = `${APP_BASE_PATH}?id=${selectedProperty.id}`;
              try {
                await navigator.share({
                  title: 'Landhacker',
                  text: address,
                  url: shareUrl,
                });
              } catch (error: any) {
                console.error('Error sharing:', error);
                // Fallback to copying to clipboard if sharing is not supported
                if (error.name === 'NotSupportedError') {
                  console.log('Share URL:', shareUrl);
                }
              }
            }}
          >
            Share Analysis
          </Button>
        </div>
      )}
    </div>
  );
}

================================================
File: frontend/src/components/Map.tsx
================================================
import ReactMapGL, { NavigationControl, GeolocateControl, Marker, Source, Layer } from "react-map-gl";
import { MeasurementLayer } from "./MeasurementLayer";
import MapboxDraw from "@mapbox/mapbox-gl-draw";
import "@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css";
import * as turf from "@turf/turf";
import { MeasurementControls } from "./MeasurementControls";
import { MeasurementCard } from "./MeasurementCard";
import type { LayerProps } from "react-map-gl";
import React from 'react';
import { useAppStore } from "@/utils/store";
import { Skeleton } from "@/components/ui/skeleton";

import "mapbox-gl/dist/mapbox-gl.css";
import { useState, useEffect, useCallback, useRef } from "react";
import brain from "brain";
import { GetConfigData, PropertyDetailsResponse } from "types";

export interface Props {
  onSelectProperty?: (property: any) => void;
  mapRef?: React.MutableRefObject<mapboxgl.Map | undefined>;
}



// Custom control for MapboxDraw
interface DrawControlProps {
  displayControlsDefault: boolean;
  controls: {
    point: boolean;
    line_string: boolean;
    polygon: boolean;
    trash: boolean;
  };
  defaultMode?: string;
  onCreate?: (e: { features: any[] }) => void;
  onUpdate?: (e: { features: any[] }) => void;
  onDelete?: () => void;
  drawRef: React.MutableRefObject<MapboxDraw | undefined>;
}

function DrawControl(props: DrawControlProps) {
  const drawInstance = useRef<MapboxDraw>();

  useControl<MapboxDraw>(
    () => {
      const draw = new MapboxDraw({
        displayControlsDefault: props.displayControlsDefault,
        controls: props.controls,
        defaultMode: props.defaultMode
      });
      drawInstance.current = draw;
      props.drawRef.current = draw;
      return draw;
    },
    ({ map }) => {
      map.on('draw.create', props.onCreate);
      map.on('draw.update', props.onUpdate);
      map.on('draw.delete', props.onDelete);
    },
    ({ map }) => {
      map.off('draw.create', props.onCreate);
      map.off('draw.update', props.onUpdate);
      map.off('draw.delete', props.onDelete);
    }
  );
  return null;
}

export function MapView({ mapRef: externalMapRef }: Props) {

  // Ref for the draw control instance
  const drawRef = useRef<MapboxDraw>();

  const { 
    selectedProperty, 
    setSelectedProperty, 
    setIsLoadingProperty, 
    setIsStyleLoading, 
    isStyleLoading, 
    shouldCenterMap, 
    setShouldCenterMap = () => {},
    measurementMode,
    setMeasurementMode,
    addMeasurement,
    clearMeasurements,
    addMeasurementPoint,
    setViewportCenter
  } = useAppStore();
  const [currentMeasurement, setCurrentMeasurement] = useState<number | null>(null);
  const [hasInitialPosition, setHasInitialPosition] = useState(false);
  const [viewState, setViewState] = useState({
    longitude: -96.7970,
    latitude: 32.7767,
    zoom: 14,
    pitch: 0,
    bearing: 0
  });
  // Get user's location on mount
  useEffect(() => {
    if (!hasInitialPosition && 'geolocation' in navigator) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setViewState(prev => ({
            ...prev,
            longitude: position.coords.longitude,
            latitude: position.coords.latitude,
            zoom: 14
          }));
          setHasInitialPosition(true);
        },
        (error) => {
          console.warn('Geolocation error:', error.message);
          setHasInitialPosition(true); // Mark as handled even if it failed
        },
        {
          enableHighAccuracy: true,
          timeout: 5000,
          maximumAge: 0
        }
      );
    }
  }, [hasInitialPosition]);

  const MAPBOX_TOKEN = "pk.eyJ1IjoidGludGluMTIzNCIsImEiOiJjbTRpbDNlMWMwMm83MmtzaWdncTNoZWt2In0.ZoyxSZXBSe21POwTspaL9w";
  const mapStyle = useAppStore(state => state.mapStyle);

  const buildMapboxUrl = (base: string, params: Record<string, string>) => {
    const searchParams = new URLSearchParams({
      access_token: MAPBOX_TOKEN,
      ...params
    });
    return `${base}?${searchParams.toString()}`;
  };

  const handleReverseGeocode = async (latitude: number, longitude: number) => {

    
    try {
      const url = buildMapboxUrl(
        `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json`,
        {
          types: 'address,place,locality,neighborhood',
          limit: '1',
          country: 'us',
        }
      );
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Mapbox API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      if (!data?.features?.length) {
        console.log('No features found in response');
        return null;
      }      
      const feature = data.features[0];
      return {
        streetAddress: feature.place_name || feature.text,
        city: feature.context?.find(ctx => ctx.id.startsWith('place.'))?.text || '',
        state: feature.context?.find(ctx => ctx.id.startsWith('region.'))?.text || '',
        zipcode: feature.context?.find(ctx => ctx.id.startsWith('postcode.'))?.text || ''
      };
    } catch (error) {
      console.error('Reverse geocoding failed:', error);
      return null;
    }
  };



  const [selectedPropId, setSelectedPropId] = useState<string | null>(null);
  const [hoveredPropId, setHoveredPropId] = useState<string | null>(null);

  const internalMapRef = useRef<any>();
  const mapRef = externalMapRef || internalMapRef;
  const moveTimeoutRef = useRef<NodeJS.Timeout>();
  const requestIdCounter = useRef<number>(0);

  // Update hoveredPropId when moving over properties
  const updateHoveredPropId = () => {
    // Don't select properties while in measurement mode or if map is not ready
    if (measurementMode !== 'none' || !mapRef.current) {
      setHoveredPropId(null);
      return;
    }
    
    // Check if the layer exists before querying
    const style = mapRef.current.getStyle();
    if (!style.layers?.some(layer => layer.id === 'layer')) {
      return;
    }
    
    try {
      const center = mapRef.current.project([viewState.longitude, viewState.latitude]);
      const features = mapRef.current.queryRenderedFeatures(center, {
        layers: ['layer']
      });

      if (features.length > 0) {
        const feature = features[0];
        const newHoveredId = feature.properties?.Prop_ID ?? null;
        setHoveredPropId(newHoveredId);
        // Clear selection when hovering over a different property
        if (newHoveredId !== selectedPropId) {
          setSelectedPropId(null);
        }
      } else {
        setHoveredPropId(null);
        setSelectedPropId(null);
      }
    } catch (error) {
      console.error('Error querying features:', error);
      setSelectedPropId(null);
    }
  };

  // Fetch property details with abort controller
  const fetchPropertyDetails = async (latitude: number, longitude: number, feature: any, centerMap: boolean = false) => {
    // Don't select new properties while in measurement mode
    if (measurementMode !== 'none') {
      return;
    }
    // Increment and capture the current request ID
    const currentRequestId = ++requestIdCounter.current;
    
    // Only set loading if this is still the latest request
    if (currentRequestId === requestIdCounter.current) {
      setIsLoadingProperty(true);
    }

    try {
      // Set the selected property ID for highlighting if this is still the latest request
      const properties = feature?.properties;
      if (currentRequestId === requestIdCounter.current) {
        setSelectedPropId(properties?.Prop_ID ?? null);
      }

      // Get address from SITUS fields, MAIL fields, or reverse geocoding (in that order)
      let address;
      if (properties?.SITUS_NUM && properties?.SITUS_ST_1) {
        // First try: Use SITUS fields (property location)
        address = {
          streetAddress: `${properties.SITUS_NUM} ${properties.SITUS_ST_1}`,
          city: properties.SITUS_CITY || '',
          state: properties.SITUS_STAT || '',
          zipcode: properties.SITUS_ZIP || ''
        };
      } else if (properties?.MAIL_LINE2) {
        // Second try: Use MAIL fields (mailing address)
        address = {
          streetAddress: properties.MAIL_LINE2,
          city: properties.MAIL_CITY || '',
          state: properties.MAIL_STAT || '',
          zipcode: properties.MAIL_ZIP || ''
        };
      } else {
        // Last resort: Use reverse geocoding
        address = await handleReverseGeocode(latitude, longitude);
        if (!address) {
          if (currentRequestId === requestIdCounter.current) {
            setIsLoadingProperty(false);
          }
          return;
        }
      }

      // Set property data from layer
      const propertyData = {
        zpid: properties?.Prop_ID ? parseInt(properties.Prop_ID) : Date.now(),
        address,
        latitude,
        longitude,
        propertyId: properties?.Prop_ID,
        ownerName: properties?.NAME_CARE ? `${properties.OWNER_NAME} ${properties.NAME_CARE}` : properties?.OWNER_NAME,
        legalAreaUnits: properties?.LGL_AREA_U,
        gisArea: properties?.GIS_AREA ? parseFloat(properties.GIS_AREA) : undefined,
        gisAreaUnits: properties?.GIS_AREA_U,
        landValue: properties?.LAND_VALUE ? parseInt(properties.LAND_VALUE) : undefined,
        improvementValue: properties?.IMP_VALUE ? parseInt(properties.IMP_VALUE) : undefined,
        marketValue: properties?.MKT_VALUE ? parseInt(properties.MKT_VALUE) : undefined,
        dateAcquired: properties?.DATE_ACQ ? parseInt(properties.DATE_ACQ) : undefined,
        fipsCode: properties?.FIPS,
        county: properties?.COUNTY,
        taxYear: properties?.TAX_YEAR ? parseInt(properties.TAX_YEAR) : undefined
      };

      // Only update state if this is still the latest request
      if (currentRequestId === requestIdCounter.current) {
        setShouldCenterMap(centerMap);
        setSelectedProperty(propertyData);
      }
    } catch (error) {
      console.error('Error fetching property details:', error);
    } finally {
      // Only update loading state if this is still the latest request
      if (currentRequestId === requestIdCounter.current) {
        setIsLoadingProperty(false);
      }
    }
  };

  // Handle viewport changes
  const handleViewportChange = async (newViewState: any) => {
    setViewState(newViewState);
    
    // Only update selection when not in measurement mode
    if (measurementMode !== 'none') {
      return;
    } else {
      
    }
    
    // Update hoveredPropId
    // updateHoveredPropId();
    
    // Clear existing timeout
    if (moveTimeoutRef.current) {
      clearTimeout(moveTimeoutRef.current);
    }

    // Set new timeout for 1 second after last movement
    moveTimeoutRef.current = setTimeout(async () => {
      // Check for features at the center of the map
      if (!mapRef.current) return;
      
      const center = mapRef.current.project([newViewState.longitude, newViewState.latitude]);
      const features = mapRef.current.queryRenderedFeatures(center, {
        layers: ['layer']
      });

      if (features.length > 0) {
        const feature = features[0];
        const newPropId = feature.properties?.Prop_ID;
        
        // Only fetch details if it's a different parcel than the one we have loaded
        if (newPropId !== selectedProperty?.propertyId) {
          // When hovering (moving the map), don't pan to location
          fetchPropertyDetails(newViewState.latitude, newViewState.longitude, feature, false);
        }
      }
    }, 200); // 1 second delay
  };


  // Pan to selected property and update selectedPropId when it changes
  useEffect(() => {
    if (selectedProperty) {
      // Update selectedPropId if propertyId exists
      if (selectedProperty.propertyId) {
        setSelectedPropId(selectedProperty.propertyId);
      }
      
      // Pan to property location if coordinates exist and shouldCenterMap is true
      if (shouldCenterMap && selectedProperty.latitude && selectedProperty.longitude) {
        setViewState(prevState => ({
          ...prevState,
          longitude: selectedProperty.longitude,
          latitude: selectedProperty.latitude,
          zoom: 16 // Increased zoom level when panning to property
        }));
      }
    }
  }, [selectedProperty]);

  useEffect(() => {
    setIsStyleLoading(true);
  }, [mapStyle, setIsStyleLoading])

  const handleDrawCreate = useCallback((e: { features: any[] }) => {
    const feature = e.features[0];
    let measurement: number;
    let coordinates: number[][];

    if (feature.geometry.type === 'LineString') {
      measurement = turf.length(feature, { units: 'miles' }); // Distance in miles
      coordinates = feature.geometry.coordinates;
    } else if (feature.geometry.type === 'Polygon') {
      // turf.area returns square meters, convert to acres
      measurement = turf.area(feature) * 0.000247105; // 1 sq meter = 0.000247105 acres
      coordinates = feature.geometry.coordinates[0]; // Outer ring
    } else {
      return;
    }

    setCurrentMeasurement(measurement);
    addMeasurement({
      id: feature.id,
      type: feature.geometry.type === 'LineString' ? 'distance' : 'area',
      value: measurement,
      coordinates
    });
  }, [addMeasurement]);

  const handleDrawUpdate = useCallback((e: { features: any[] }) => {
    handleDrawCreate(e); // Reuse the create handler
  }, [handleDrawCreate]);

  // Update draw mode when measurement mode changes
  useEffect(() => {
    if (drawRef.current && measurementMode !== 'none') {
      drawRef.current.changeMode(
        measurementMode === 'distance' ? 'draw_line_string' : 'draw_polygon'
      );
    }
  }, [measurementMode]);

  const handleDrawDelete = useCallback(() => {
    setCurrentMeasurement(null);
    clearMeasurements();
  }, [clearMeasurements]);



  return (
    <div className="relative w-full h-full">


      {/* Measurement Controls */}
      <div className="absolute bottom-[175px] left-2.5 z-[1]">
        <MeasurementControls />
      </div>
      {measurementMode !== 'none' && (
        <div className="absolute bottom-4 left-1/2 -translate-x-1/2 w-[90%] max-w-2xl pl-8 z-[2]">
          <MeasurementCard />
        </div>
      )}

      <ReactMapGL
      {...viewState}
      onMove={evt => {
        setViewState(evt.viewState);
        setViewportCenter([evt.viewState.longitude, evt.viewState.latitude]);
        updateHoveredPropId();
      }}

      onClick={evt => {
        if (measurementMode === 'none' && mapRef.current) {
          // Only handle property selection when not in measurement mode
          const features = mapRef.current.queryRenderedFeatures(evt.point, {
            layers: ['layer']
          });
          if (features.length > 0) {
            const feature = features[0];
            fetchPropertyDetails(evt.lngLat.lat, evt.lngLat.lng, feature, true);
          }
        }
      }}
      onMoveEnd={evt => handleViewportChange(evt.viewState)} 

      initialViewState={{
        longitude: -96.7970,
        latitude: 32.7767,
        zoom: 14,
        pitch: 0,
      }}
      style={{ width: "100%", height: "100%" }}
      mapStyle={mapStyle === "custom" ? "mapbox://styles/tintin1234/cm5x2775i00hf01sbewoxfwe6" : "mapbox://styles/tintin1234/cm67i0t9c005u01s70btn35iu"}
      terrain={{ source: "mapbox-dem", exaggeration: 1.2 }}
      maxPitch={60}
      minZoom={2}
      maxZoom={18}

      fog={{
        range: [0.5, 10],
        color: "#242424",
        "horizon-blend": 0.2
      }}

      mapboxAccessToken={MAPBOX_TOKEN}
      // onClick is handled by the onClick prop above
      ref={(ref) => {
        if (ref) {
          mapRef.current = ref.getMap();
        }
      }}
      onLoad={(event) => {
        // Print all available layers
        if (mapRef.current) {
          const style = mapRef.current.getStyle();
        }

        // Mark the style as loaded
        setIsStyleLoading(false);

        // Also listen to "style.load" in case it fires after onLoad:
        // @ts-ignore - event.target exists but TypeScript doesn't recognize it
        event.target.on("style.load", () => {
          setIsStyleLoading(false);
        });

        // Listen for error
        // @ts-ignore - event.target exists but TypeScript doesn't recognize it
        event.target.on('error', (e) => {
          console.error('Mapbox error:', e);
        });
      }}
    >
      {/* Measurement Layer */}
      {measurementMode !== 'none' && (
        <MeasurementLayer />
      )}

      {/* Crosshair overlay */}
      <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 pointer-events-none z-10">
        <div className="w-6 h-6 flex items-center justify-center">
          <div className={`w-0.5 h-6 absolute ${mapStyle === "custom" ? "bg-white" : "bg-black"}`}></div>
          <div className={`w-6 h-0.5 absolute ${mapStyle === "custom" ? "bg-white" : "bg-black"}`}></div>
        </div>
      </div>

      <NavigationControl position="bottom-left" showCompass={true} showZoom={true} visualizePitch={true} />
      <GeolocateControl
        position="bottom-left"
        positionOptions={{ enableHighAccuracy: true }}
        trackUserLocation={true}
        showUserHeading={true}
        showAccuracyCircle={true}
      />
      
      {/* Add terrain source */}
      <Source
        id="mapbox-dem"
        type="raster-dem"
        url="mapbox://mapbox.mapbox-terrain-dem-v1"
        tileSize={512}
        maxzoom={16}
      />

      {!isStyleLoading && (
        <>
      {/* Add custom layer for buildings */}
      <Source 
        id="composite1" 
        type="vector" 
        url="mapbox://tintin1234.landglide"
        maxzoom={18}
        minzoom={10}
      >
        {/* Base layer for all parcels */}
        {/* <Layer
          id="layer"
          type="fill"
          source="composite1"
          source-layer="layer"
          paint={{
            "fill-color": "#ffffff",
            "fill-opacity": [
              "case",
              ["==", ["get", "Prop_ID"], hoveredPropId],
              0.3,
              0.1
            ]
          }}
          layout={{
            "visibility": "visible"
          }}
        /> */}

        {/* Highlight layer for selected or hovered parcel */}
        {(selectedPropId || hoveredPropId) && (
          <Layer
            id="selected-outline"
            type="line"
            source="composite1"
            source-layer="layer"
            filter={measurementMode === 'none' ? 
              ["any",
                ["==", ["get", "Prop_ID"], hoveredPropId],
                ["==", ["get", "Prop_ID"], selectedPropId]
              ] :
              ["==", ["get", "Prop_ID"], selectedPropId]
            }
            paint={{
              "line-color": "#0066FF",
              "line-width": 3
            }}
            layout={{
              "visibility": "visible"
            }}
          />
        )}

      </Source>

      </>
      )}
       {/* Show selected location with red marker only when shouldCenterMap is true */}
      {/* {shouldCenterMap && selectedProperty && selectedProperty.latitude && selectedProperty.longitude && (
        <Marker
          longitude={selectedProperty.longitude}
          latitude={selectedProperty.latitude}
          color="#FF0000"
          scale={1.5}
          style={{
            cursor: 'pointer',
            filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.5))'
          }}
        />
      )} */}



    </ReactMapGL>
    </div>
  );
}


================================================
File: frontend/src/components/MeasurementCard.tsx
================================================
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Alert } from "@/components/ui/alert";
import { MinusIcon, SquareIcon, XIcon, TrashIcon, PlusIcon } from "lucide-react";
import { useAppStore } from "@/utils/store";

export function MeasurementCard() {
  const { 
    measurementMode, 
    setMeasurementMode, 
    clearMeasurements,
    measurementPoints,
    addMeasurementPoint,
    viewportCenter,
    currentMeasurement
  } = useAppStore();

  const formatMeasurement = (value: number) => {
    if (measurementMode === "distance") {
      // Convert miles to feet if less than 0.1 miles
      return value < 0.1
        ? `${(value * 5280).toFixed(0)} ft`
        : `${value.toFixed(2)} mi`;
    } else {
      // Convert square meters to acres
      return `${value.toFixed(2)} acres`;
    }
  };

  return (
    <Card className="bg-card shadow-lg rounded-sm">
      <div className="p-4 space-y-4">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-semibold tracking-tight">
            Measurement Tools
          </h2>
          <Button
            variant="ghost"
            size="icon"
            onClick={() => {
              setMeasurementMode("none");
              clearMeasurements();
            }}
          >
            <XIcon className="h-4 w-4" />
          </Button>
        </div>

        <div className="flex flex-col gap-4">
          <div className="flex items-center gap-2">
            <div className="flex border rounded-md overflow-hidden">
              <Button
                variant="ghost"
                size="sm"
                className={`px-3 rounded-none border-r ${measurementMode === "distance" ? "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground" : "hover:bg-primary/90 hover:text-primary-foreground"}`}
                onClick={() => setMeasurementMode("distance")}
              >
                Distance
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className={`px-3 rounded-none ${measurementMode === "area" ? "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground" : "hover:bg-primary/90 hover:text-primary-foreground"}`}
                onClick={() => setMeasurementMode("area")}
              >
                Area
              </Button>
            </div>

            <div className="flex-1" />
            <Button
              variant="default"
              size="sm"
              onClick={() => {
                // Add viewport center as measurement point
                addMeasurementPoint(viewportCenter);
              }}
            >
              <PlusIcon className="h-4 w-4" />
            </Button>
            <Button
              variant="secondary"
              size="sm"
              onClick={() => {
                clearMeasurements();
              }}
            >
              <TrashIcon className="h-4 w-4" />
            </Button>
          </div>

          <div className="space-y-4">
              <div className="flex items-center justify-between border rounded-md p-3 bg-muted/10">
                <div className="space-y-1">
                  <div className="text-sm text-muted-foreground">
                    {measurementMode === "distance" ? "Distance" : "Area"}
                  </div>
                  <div className="text-xl font-semibold">
                    {currentMeasurement !== null ? formatMeasurement(currentMeasurement) : '0'}
                  </div>
                </div>
              </div>


            </div>
          
        </div>
      </div>
    </Card>
  );
}


================================================
File: frontend/src/components/MeasurementControls.tsx
================================================
import { Button } from "@/components/ui/button";
import { RulerIcon } from "lucide-react";
import { useAppStore } from "@/utils/store";

export function MeasurementControls() {
  const { measurementMode, setMeasurementMode } = useAppStore();

  return (
    <Button
      variant="secondary"
      size="icon"
      className="mapboxgl-ctrl-group mapboxgl-ctrl h-[29px] w-[29px] !p-0 z-[2]"
      onClick={() => setMeasurementMode(measurementMode === 'none' ? 'distance' : 'none')}
    >
      <RulerIcon className="h-4 w-4" />
    </Button>
  );
}


================================================
File: frontend/src/components/MeasurementLayer.tsx
================================================
import { Layer, Source } from "react-map-gl";
import { useAppStore } from "@/utils/store";
import * as turf from "@turf/turf";
import { useEffect, useState } from "react";

// No props needed anymore as we use store

export function MeasurementLayer() {
  const {
    measurementMode,
    measurementPoints,
    setCurrentMeasurement,
    addMeasurementPoint,
    viewportCenter
  } = useAppStore();

  // Generate GeoJSON for visualization
  const getGeoJSON = () => {
    if (!measurementPoints || !Array.isArray(measurementPoints)) return null;
    if (measurementPoints.length === 0 && measurementMode === 'none') return null;

    // Create point features for all measurement points
    const pointFeatures = measurementPoints.map((point) => ({
      type: "Feature",
      geometry: {
        type: "Point",
        coordinates: point,
      },
      properties: {},
    }));

    let mainFeature;
    if (measurementMode === "distance") {
      const coordinates = [...measurementPoints];
      coordinates.push(viewportCenter);

      mainFeature = {
        type: "Feature",
        geometry: {
          type: "LineString",
          coordinates,
        },
        properties: {},
      };
    } else if (measurementMode === "area") {
      const coordinates = [...measurementPoints];
      if (coordinates.length > 0) {
        coordinates.push(viewportCenter);
      }

      // If we have less than 3 points, show a LineString
      if (coordinates.length < 3) {
        mainFeature = {
          type: "Feature",
          geometry: {
            type: "LineString",
            coordinates,
          },
          properties: {},
        };
      } else {
        // If we have 3 or more points, show a Polygon
        const polygonCoordinates = [...coordinates];
        polygonCoordinates.push(polygonCoordinates[0]); // Close the polygon

        mainFeature = {
          type: "Feature",
          geometry: {
            type: "Polygon",
            coordinates: [polygonCoordinates],
          },
          properties: {},
        };
      }
    }

    // Only include mainFeature if it exists
    if (!mainFeature) {
      return {
        type: "FeatureCollection",
        features: pointFeatures,
      };
    }

    return {
      type: "FeatureCollection",
      features: [...pointFeatures, mainFeature],
    };
  };

  // Calculate measurement
  useEffect(() => {
    const geojson = getGeoJSON();
    if (!geojson || !geojson.features || geojson.features.length === 0) {
      setCurrentMeasurement(null);
      return;
    }

    let measurement: number | null = null;
    // Get the main feature (last feature in the array)
    const mainFeature = geojson.features[geojson.features.length - 1];

    if (measurementMode === "distance" && mainFeature.geometry.type === "LineString") {
      measurement = turf.length(mainFeature, { units: "miles" });
    } else if (
      measurementMode === "area" &&
      mainFeature.geometry.type === "Polygon" &&
      mainFeature.geometry.coordinates[0]?.length >= 4
    ) {
      measurement = turf.area(mainFeature) * 0.000247105; // Convert to acres
    }

    setCurrentMeasurement(measurement);
  }, [measurementPoints, viewportCenter, measurementMode]);

  const geojson = getGeoJSON();
  if (!geojson) return null;

  return (
    <Source id="measurement" type="geojson" data={geojson}>
      {/* Line or polygon fill */}
      {/* Line or polygon fill */}
      <Layer
        id="measurement-fill"
        type={measurementMode === "distance" || (measurementMode === "area" && (!measurementPoints || measurementPoints.length < 3)) ? "line" : "fill"}
        paint={{
          ...(measurementMode === "distance" || (measurementMode === "area" && (!measurementPoints || measurementPoints.length < 3))
            ? {
                "line-color": "#ff0000",
                "line-width": 2,
              }
            : {
                "fill-color": "#ff0000",
                "fill-opacity": 0.2,
              }),
        }}
      />

      {/* Polygon outline for area mode */}
      {measurementMode === "area" && measurementPoints && measurementPoints.length >= 3 && (
        <Layer
          id="measurement-outline"
          type="line"
          paint={{
            "line-color": "#ff0000",
            "line-width": 2,
          }}
        />
      )}

      {/* Points */}
      <Layer
        id="measurement-points"
        type="circle"
        source="measurement"
        paint={{
          "circle-radius": 6,
          "circle-color": "#10b981", // Match primary green color
          "circle-stroke-width": 2,
          "circle-stroke-color": "#FFFFFF",
          "circle-opacity": 0.9,
        }}
        // Only show Point features
        filter={["==", ["geometry-type"], "Point"]}
      />
    </Source>
  );
}


================================================
File: frontend/src/components/PropertyCard.tsx
================================================
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";


import { useAppStore } from "@/utils/store";
import { Card } from "@/components/ui/card";
import { HomeIcon, ExternalLinkIcon, XIcon, UserIcon } from "lucide-react";

import type { PropertyDetailsResponse } from "types";
import { toast } from "sonner";

export interface Props {
  onViewMore?: () => void;
}

export function PropertyCard({ onViewMore }: Props) {
  const { setPropertyCardVisible, isLoadingProperty, selectedProperty, userProfile } = useAppStore();

  const handleViewMore = () => {
    console.log("Subscription status:", userProfile?.subscriptionTier, userProfile?.subscriptionStatus);
    
    if (userProfile?.subscriptionTier === "monthly" || userProfile?.subscriptionStatus === "active" || userProfile?.subscriptionStatus === "cancelled_active") {
      console.log("User has active subscription, opening dialog");
      onViewMore();
    } else {
      console.log("User does not have subscription, showing toast");
      toast.error("You need an active subscription to view detailed property analysis", {
        duration: 5000,
        description: "Subscribe in your profile to unlock all features",
        action: {
          label: "Profile",
          onClick: () => {
            // Open user dialog from App.tsx
            const event = new CustomEvent("open-user-dialog");
            window.dispatchEvent(event);
          }
        }
      });
    }
  };

  return (
    <Card className="bg-card shadow-lg rounded-sm">
      <div className="p-4 space-y-4">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-semibold tracking-tight">
            Property Details
          </h2>
          <div className="flex items-center gap-1">
            {selectedProperty && !isLoadingProperty && selectedProperty.propertyId && (
              <Button
                variant="ghost"
                size="icon"
                title="View Details"
                onClick={handleViewMore}
              >
                <ExternalLinkIcon className="w-4 h-4" />
              </Button>
            )}
            <Button
              variant="ghost"
              size="icon"
              title="Hide Card"
              onClick={() => setPropertyCardVisible(false)}
            >
              <XIcon className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {isLoadingProperty ? (
          <div className="space-y-4">
            {/* Address */}
            <div className="space-y-2">
              <div className="flex items-center gap-2 text-xs text-muted-foreground">
                <HomeIcon className="w-4 h-4" />
                Address
              </div>
              <Skeleton className="h-5 w-full" />
            </div>

            {/* Owner */}
            <div className="space-y-2">
              <div className="flex items-center gap-2 text-xs text-muted-foreground">
                <UserIcon className="w-4 h-4" />
                Owner
              </div>
              <Skeleton className="h-5 w-full" />
            </div>
          </div>
        ) : selectedProperty ? (
          <div className="space-y-4">
            {/* Address */}
            <div className="space-y-2">
              <div className="flex items-center gap-2 text-xs text-muted-foreground">
                <HomeIcon className="w-4 h-4" />
                Address
              </div>
              <p className="text-sm font-medium break-words">
                {selectedProperty.address?.streetAddress}, {selectedProperty.address?.city}, {selectedProperty.address?.state} {selectedProperty.address?.zipcode}
              </p>
            </div>

            {/* Owner */}
            {selectedProperty.ownerName && (
              <div className="space-y-2">
                <div className="flex items-center gap-2 text-xs text-muted-foreground">
                  <HomeIcon className="w-4 h-4" />
                  Owner
                </div>
                <p className="text-sm font-medium break-words">
                  {selectedProperty.ownerName}
                </p>
              </div>
            )}
          </div>
        ) : (
          <div className="flex items-center justify-center py-8">
            <p className="text-md text-muted-foreground">Please select a valid property</p>
          </div>
        )}
      </div>
    </Card>
  );
}


================================================
File: frontend/src/components/PropertyDialog.tsx
================================================
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { GeneratePrice } from "@/components/GeneratePrice";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Skeleton } from "@/components/ui/skeleton";
import { useAppStore } from "@/utils/store";
import brain from "brain";
import { Separator } from "@/components/ui/separator";
import { HomeIcon, MapPinIcon, RulerIcon, DollarSignIcon, CalendarIcon, BedDoubleIcon, BathIcon, ActivityIcon, Car, Droplets, Snowflake, Flame, Trees, Waves, Sparkles, Mountain, ChevronDown, Clock, Route, Bookmark } from "lucide-react";
import { useEffect, useState } from "react";
import { useUserGuardContext } from "app";
import { savePropertyQuery } from "@/utils/firebase";
import { cn } from "@/lib/utils";
import { useQueueStore, PriceJob } from "@/utils/queue";
import type { PropertyDetailsResponse } from "types";

export interface Props {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

interface FeatureBadgeProps {
  icon: React.ReactNode;
  label: string;
  value: boolean;
}

function FeatureBadge({ icon, label, value }: FeatureBadgeProps) {
  const presentClass = 'bg-green-500/10 text-green-500 border-green-500';
  const absentClass = 'bg-red-500/10 text-red-500/60 border-red-500/60 line-through';
  return (
    <Badge 
      variant="outline" 
      className={`flex items-center gap-2 px-3 py-1.5 transition-colors ${value ? presentClass : absentClass}`}
    >
      {icon}
      {label}
    </Badge>
  );
}

interface DetailItemProps {
  icon: React.ReactNode;
  label: string;
  value: string | number | null;
  formatter?: (value: any) => string;
}

function DetailItem({ icon, label, value, formatter }: DetailItemProps) {
  const displayValue = value === null ? "N/A" : formatter ? formatter(value) : value;
  
  return (
    <div className="flex items-start gap-3">
      <div className="mt-0.5">{icon}</div>
      <div>
        <p className="text-xs font-medium text-muted-foreground">{label}</p>
        <p className="text-sm">{displayValue}</p>
      </div>
    </div>
  );
}

function QueueStatus() {
  const jobs = useQueueStore(state => state.jobs);
  
  if (jobs.length === 0) return null;

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Price Generation Queue</h3>
      <div className="space-y-2">
        {jobs.map((job) => {
          const address = `${job.property.address?.streetAddress}, ${job.property.address?.city}`;
          return (
            <div key={job.id} className="flex items-center justify-between p-3 rounded-lg border bg-card">
              <div className="space-y-1">
                <p className="text-sm font-medium truncate">{address}</p>
                <p className="text-xs text-muted-foreground capitalize">{job.status.replace('-', ' ')}</p>
              </div>
              {job.status === 'completed' && (
                <Badge variant="success" className="capitalize">
                  {job.predictedPrice?.predicted_price}
                </Badge>
              )}
              {job.status === 'error' && (
                <Badge variant="destructive" className="capitalize">
                  Error
                </Badge>
              )}
              {(job.status === 'fetching-prices' || job.status === 'predicting') && (
                <Loader2 className="h-4 w-4 animate-spin" />
              )}
              {job.status === 'queued' && (
                <Badge variant="secondary" className="capitalize">
                  Queued
                </Badge>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
}

export function PropertyDialog({ open, onOpenChange }: Props) {
  const { user } = useUserGuardContext();
  const { selectedProperty, setSelectedProperty, isLoadingProperty, setIsLoadingProperty, savedProperties } = useAppStore();

  useEffect(() => {
    if (open && selectedProperty && savedProperties) {
      // Find matching saved property by propertyId
      const savedProperty = savedProperties.find(
        (saved) => saved.propertyId === selectedProperty.propertyId
      );

      // If found, update selectedProperty with saved data
      if (savedProperty) {
        setSelectedProperty(savedProperty);
      }
    }
  }, [open, selectedProperty?.address, savedProperties, setSelectedProperty]);
  
  const renderParcelInfo = () => {
    if (!(selectedProperty?.propertyId || selectedProperty?.ownerName || selectedProperty?.gisArea || selectedProperty?.landValue)) {
      return null;
    }

    return (
      <>
        <div className="space-y-4">
          <h3 className="text-lg font-semibold">Parcel Information</h3>
          <div className="grid gap-4 sm:grid-cols-2">
            {selectedProperty?.propertyId && (
              <DetailItem
                icon={<HomeIcon className="w-4 h-4" />}
                label="Property ID"
                value={selectedProperty.propertyId}
              />
            )}
            {selectedProperty?.address && (
              <DetailItem
                icon={<MapPinIcon className="w-4 h-4" />}
                label="Address"
                value={`${selectedProperty.address.streetAddress}, ${selectedProperty.address.city}, ${selectedProperty.address.state} ${selectedProperty.address.zipcode}`}
              />
            )}
            {selectedProperty?.ownerName && (
              <DetailItem
                icon={<HomeIcon className="w-4 h-4" />}
                label="Owner"
                value={selectedProperty.ownerName}
              />
            )}
            {selectedProperty?.gisArea && (
              <DetailItem
                icon={<RulerIcon className="w-4 h-4" />}
                label="GIS Area"
                value={`${selectedProperty.gisArea} ${selectedProperty.gisAreaUnits || ''}`}
              />
            )}
            {selectedProperty?.legalAreaUnits && (
              <DetailItem
                icon={<RulerIcon className="w-4 h-4" />}
                label="Legal Area Units"
                value={selectedProperty.legalAreaUnits}
              />
            )}

            {selectedProperty?.improvementValue && (
              <DetailItem
                icon={<DollarSignIcon className="w-4 h-4" />}
                label="Improvement Value"
                value={selectedProperty.improvementValue}
                formatter={(value) => `$${value?.toLocaleString()}`}
              />
            )}

            {selectedProperty?.dateAcquired && (
              <DetailItem
                icon={<CalendarIcon className="w-4 h-4" />}
                label="Date Acquired"
                value={selectedProperty.dateAcquired}
                formatter={(value) => new Date(value).toLocaleDateString()}
              />
            )}
            {selectedProperty?.taxYear && (
              <DetailItem
                icon={<CalendarIcon className="w-4 h-4" />}
                label="Tax Year"
                value={selectedProperty.taxYear}
              />
            )}
          </div>
        </div>
        <Separator />
      </>
    );
  };

  const renderPropertyDetails = () => null;

  return (
    <Dialog open={open} onOpenChange={(open) => open || onOpenChange(false)}>
      <DialogContent className="w-[95vw] max-h-[90vh] overflow-hidden rounded-lg" onInteractOutside={(event) => event.preventDefault()} >
        <DialogHeader>
          <DialogTitle className="text-xl flex items-center gap-2">
            <HomeIcon className="w-5 h-5" />
            Property Details
          </DialogTitle>
        </DialogHeader>

        <ScrollArea className="h-[calc(90vh-8rem)] px-2 md:pr-4 md:-mr-4">
          {isLoadingProperty ? (
            <div className="space-y-6">
              <div className="space-y-4">
                <Skeleton className="h-6 w-32" />
                <div className="grid gap-4 sm:grid-cols-2">
                  {[...Array(4)].map((_, i) => (
                    <div key={i} className="space-y-2">
                      <Skeleton className="h-4 w-16" />
                      <Skeleton className="h-6 w-full" />
                    </div>
                  ))}
                </div>
              </div>
              <Skeleton className="h-px w-full" />
              <div className="space-y-4">
                <Skeleton className="h-6 w-32" />
                <div className="grid gap-4 sm:grid-cols-2">
                  {[...Array(4)].map((_, i) => (
                    <div key={i} className="space-y-2">
                      <Skeleton className="h-4 w-16" />
                      <Skeleton className="h-6 w-full" />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <div className="space-y-6">
              {renderParcelInfo()}
              {renderPropertyDetails()}
              <GeneratePrice />
            </div>
          )}
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
}


================================================
File: frontend/src/components/SearchBar.tsx
================================================
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { useAppStore } from "@/utils/store";
import brain from "brain";
import { useState, useEffect, useRef } from "react";
import { GetConfigData, PropertySearchResult } from "types";

interface Coordinates {
  latitude: number;
  longitude: number;
}

interface GeocodingFeature {
  id: string;
  type: string;
  place_type: string[];
  relevance: number;
  properties: {
    accuracy?: string;
    address?: string;
    category?: string;
    maki?: string;
  };
  text: string;
  place_name: string;
  center: [number, number];
  geometry: {
    type: string;
    coordinates: [number, number];
  };
  context?: Array<{
    id: string;
    text: string;
  }>;
}

interface GeocodingResponse {
  type: string;
  query: string[];
  features: GeocodingFeature[];
  attribution: string;
}

export interface Props {
  onSearch?: (query: string) => void;
  mapRef?: React.RefObject<mapboxgl.Map>;
}

export function SearchBar({ onSearch, mapRef }: Props) {
  const [focused, setFocused] = useState(false);
  const { setSelectedProperty, setIsLoadingProperty, setShouldCenterMap } = useAppStore();
  const [searchResults, setSearchResults] = useState<PropertySearchResult[]>([]);
  const [loading, setLoading] = useState(false);

  const [query, setQuery] = useState("");
  const searchTimeout = useRef<NodeJS.Timeout>();

  useEffect(() => {
    if (!query || query.length < 2) {
      setSearchResults([]);
      return;
    }

    // Only show loading state if query is long enough
    if (query.length >= 2) {
      setLoading(true);
    }

    // Clear previous timeout
    if (searchTimeout.current) {
      clearTimeout(searchTimeout.current);
    }

    // Set new timeout for 500ms for better responsiveness
    searchTimeout.current = setTimeout(() => {
      handleSearch(query);
    }, 500);

    // Cleanup timeout on unmount or when query changes
    return () => {
      if (searchTimeout.current) {
        clearTimeout(searchTimeout.current);
      }
    };
  }, [query]);

  const isCoordinates = (query: string): Coordinates | null => {
    // Match patterns like "40.7128,-74.0060" or "40.7128, -74.0060"
    const coordPattern = /^(-?\d+\.?\d*),\s*(-?\d+\.?\d*)$/;
    const match = query.match(coordPattern);
    
    if (match) {
      const latitude = parseFloat(match[1]);
      const longitude = parseFloat(match[2]);
      
      // Basic validation of coordinates
      if (latitude >= -90 && latitude <= 90 && longitude >= -180 && longitude <= 180) {
        return { latitude, longitude };
      }
    }
    
    return null;
  };

  const buildMapboxUrl = (base: string, params: Record<string, string>) => {
    const searchParams = new URLSearchParams({
      access_token: "pk.eyJ1IjoidGludGluMTIzNCIsImEiOiJjbTRpbDNlMWMwMm83MmtzaWdncTNoZWt2In0.ZoyxSZXBSe21POwTspaL9w",
      ...params
    });
    return `${base}?${searchParams.toString()}`;
  };

  const handleReverseGeocode = async (coords: Coordinates) => {
    console.log('Reverse geocoding coordinates:', coords);    
    setLoading(true);
    try {
      const url = buildMapboxUrl(
        `https://api.mapbox.com/geocoding/v5/mapbox.places/${coords.longitude},${coords.latitude}.json`,
        {
          types: 'address,place,locality,neighborhood',
          limit: '5',
          country: 'us',
        }
      );
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Mapbox API error: ${response.status} ${response.statusText}`);
      }

      const data: GeocodingResponse = await response.json();
      console.log('Reverse geocoding response:', data);

      if (!data?.features?.length) {
        console.log('No features found in response');
        setSearchResults([]);
        return;
      }
      
      // Transform Mapbox results to match our app's format
      const transformedResults = data.features.map((feature, index) => ({
        // Generate a temporary ID for Mapbox results
        zpid: `mb_${Date.now()}_${index}`,
        streetAddress: feature.place_name || feature.text,
        city: feature.context?.find(ctx => ctx.id.startsWith('place.'))?.text || '',
        state: feature.context?.find(ctx => ctx.id.startsWith('region.'))?.text || '',
        zipcode: feature.context?.find(ctx => ctx.id.startsWith('postcode.'))?.text || '',
        latitude: coords.latitude,
        longitude: coords.longitude
      }));
      
      setSearchResults(transformedResults);
    } catch (error) {
      console.error('Reverse geocoding failed:', error);
      setSearchResults([]);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = async (query: string) => {
    // Don't search if query is too short or no token
    if (query.length < 2) return;
    if (!query) {
      setSearchResults([]);
      return;
    }

    // Check if input is coordinates
    const coords = isCoordinates(query);
    if (coords) {
      await handleReverseGeocode(coords);
      return;
    }

    setLoading(true);
    try {
      const url = buildMapboxUrl(
        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(query)}.json`,
        {
          types: 'address,place,locality,neighborhood',
          limit: '5',
          country: 'us',
        }
      );
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Mapbox API error: ${response.status} ${response.statusText}`);
      }

      const data: GeocodingResponse = await response.json();

      if (!data?.features?.length) {
        console.log('No features found in response');
        setSearchResults([]);
        return;
      }
      
      // Transform Mapbox results to match our app's format
      const transformedResults = data.features.map((feature, index) => ({
        // Generate a temporary ID for Mapbox results
        zpid: `mb_${Date.now()}_${index}`,
        streetAddress: feature.place_name || feature.text,
        city: feature.context?.find(ctx => ctx.id.startsWith('place.'))?.text || '',
        state: feature.context?.find(ctx => ctx.id.startsWith('region.'))?.text || '',
        zipcode: feature.context?.find(ctx => ctx.id.startsWith('postcode.'))?.text || '',
        latitude: feature.center[1],
        longitude: feature.center[0]
      }));
      
      setSearchResults(transformedResults);
    } catch (error) {
      console.error('Search failed:', error);
      setSearchResults([]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="relative w-full">
          <Command className="w-full overflow-hidden rounded-lg" shouldFilter={false}>
            <CommandInput
              placeholder="Search by address"
              value={query}
              onValueChange={setQuery}
              disabled={false}
              className="h-10 bg-background/90 backdrop-blur-sm w-full text-base"
              onFocus={() => setFocused(true)}
              onBlur={() => {
                // Small delay to allow onSelect to fire
                setTimeout(() => setFocused(false), 200);
              }}
            />
            {focused && <CommandList className="max-h-[200px] overflow-y-auto">
              <CommandEmpty>{loading ? 'Searching...' : 'No results found.'}</CommandEmpty>
              <CommandGroup>
                {loading ? (
                  <CommandItem value="loading" disabled>
                    Searching...
                  </CommandItem>
                ) : (searchResults?.length > 0 ? searchResults : []).map((result, idx) => (
                  <CommandItem
                    key={idx}
                    value={result.zpid.toString()}
                    onSelect={() => {
                      setFocused(false);
                      setIsLoadingProperty(true);

                      const address = {
                          streetAddress: result.streetAddress,
                          city: result.city,
                          state: result.state,
                          zipcode: result.zipcode
                        }
                      const latitude = result.latitude
                      const longitude = result.longitude
                      
                      // Always pan to location when selecting from search
                      setShouldCenterMap(true);
                      setSelectedProperty({
                        ...result,
                        address, 
                      });
    
                      // Query map layers for additional data if map is available
                      if (mapRef) {
                        const center = mapRef.current.project([longitude, latitude]);
                        const features = mapRef.current.queryRenderedFeatures(center, {
                          layers: ['layer']
                        });
                        if (features.length > 0) {
                          const feature = features[0];
                          const properties = feature.properties || {};

                          // Combine Mapbox result with layer data
                          setSelectedProperty({
                            ...result,
                            zpid: parseInt(result.zpid.replace('mb_', '')) || Date.now(),
                            address,
                            longitude,
                            latitude,
                            propertyId: properties?.Prop_ID,
                            ownerName: properties?.NAME_CARE ? `${properties.OWNER_NAME} ${properties.NAME_CARE}` : properties?.OWNER_NAME,
                            legalAreaUnits: properties?.LGL_AREA_U,
                            gisArea: properties?.GIS_AREA ? parseFloat(properties.GIS_AREA) : undefined,
                            gisAreaUnits: properties?.GIS_AREA_U,
                            landValue: properties?.LAND_VALUE ? parseInt(properties.LAND_VALUE) : undefined,
                            improvementValue: properties?.IMP_VALUE ? parseInt(properties.IMP_VALUE) : undefined,
                            marketValue: properties?.MKT_VALUE ? parseInt(properties.MKT_VALUE) : undefined,
                            dateAcquired: properties?.DATE_ACQ ? parseInt(properties.DATE_ACQ) : undefined,
                            fipsCode: properties?.FIPS,
                            county: properties?.COUNTY,
                            taxYear: properties?.TAX_YEAR ? parseInt(properties.TAX_YEAR) : undefined
                          });
                        } else {
                          // No layer data found, use just the Mapbox result
                          setSelectedProperty({
                            ...result,
                            zpid: parseInt(result.zpid) || Date.now(),
                            address,
                            longitude,
                            latitude
                          });
                        }
                      } else {
                        // No map reference, use just the Mapbox result
                        setSelectedProperty({
                          ...result,
                          zpid: parseInt(result.zpid) || Date.now(),
                          address,
                          longitude,
                          latitude
                        });
                      }
                      setIsLoadingProperty(false);
                    }}
                  >
                    <div className="flex flex-col gap-1">
                      <div className="font-medium text-base">{result.streetAddress}</div>
                      <div className="text-base text-muted-foreground">
                        {[result.city, result.state, result.zipcode].filter(Boolean).join(', ')}
                      </div>
                    </div>
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>}
          </Command>
    </div>
  );
}


================================================
File: frontend/src/components/UserDialog.tsx
================================================
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useUserGuardContext } from "app";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { LogOutIcon, CoinsIcon, PlusCircleIcon } from "lucide-react";
import { firebaseAuth, firebaseApp } from "app";

import { useAppStore } from "@/utils/store";
import { useEffect, useState } from "react";

// Set this to true to use test environment, false to use production
const USE_TEST_ENVIRONMENT = true;

// Stripe public keys
const STRIPE_TEST_PUBLIC_KEY = "pk_test_51QwbVmQD0tmjQB7AGQpOUal8TwMT8Q705HqW8S2g07MjYhlT9NTnFQBaE0BiN55PkzkKaO3MuGPnvsQfrYOsHiRP00h0YNLjUp";
const STRIPE_PRODUCTION_PUBLIC_KEY = "pk_live_51Qbr7iGPQrpE7XHPIwZFDqkTEMJFjIAoozLz23yLuRgXK0ogjmXy4b2eS35MnpzWXh8ie6bFePuxw905dUATBg0G00KPGx1a7s";

// Price IDs
const TEST_PRICE_IDS = {
  MONTHLY: "price_1QwdxMQD0tmjQB7AzDZquNZO",   // Monthly subscription
  TOKENS_500: "price_1Qwe11QD0tmjQB7AQWs7M9nE",  // 500 tokens
  TOKENS_1250: "price_1QwdzOQD0tmjQB7Ap9CLBHBn", // 1250 tokens
  TOKENS_2500: "price_1Qwe0UQD0tmjQB7ALfloZuTq"  // 2500 tokens
};

const PRODUCTION_PRICE_IDS = {
  MONTHLY: "price_1QwaGDGPQrpE7XHPsBGjwnax",   // Monthly subscription
  TOKENS_500: "price_1QwaQCGPQrpE7XHPaWlhn5eN",  // 500 tokens
  TOKENS_1250: "price_1QwaQmGPQrpE7XHPf7bW4yF7", // 1250 tokens
  TOKENS_2500: "price_1QwaR9GPQrpE7XHPGB5Hn9GU"  // 2500 tokens
};

// Select the appropriate set based on environment
const PRICE_IDS = USE_TEST_ENVIRONMENT ? TEST_PRICE_IDS : PRODUCTION_PRICE_IDS;
const STRIPE_PUBLIC_KEY = USE_TEST_ENVIRONMENT ? STRIPE_TEST_PUBLIC_KEY : STRIPE_PRODUCTION_PUBLIC_KEY;

import { loadStripe } from "@stripe/stripe-js";
import brain from "brain";

export interface Props {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function UserDialog({ open, onOpenChange }: Props) {
  const { user } = useUserGuardContext();
  const { userProfile, isLoadingProfile, initializeUserProfileListener } = useAppStore();

  useEffect(() => {
    if (!user) return;
    const unsubscribe = initializeUserProfileListener(user.uid);
    return () => unsubscribe();
  }, [user, initializeUserProfileListener]);

  const handlePurchase = async (productId: string) => {
    try {
      const response = await brain.create_checkout_session({
        price_id: productId,
        success_url: `${window.location.origin}${window.location.pathname}?payment=success`,
        cancel_url: `${window.location.origin}${window.location.pathname}?payment=cancelled`,
      });
      const data = await response.json();
      console.log(data)

      const stripe = await loadStripe(STRIPE_PUBLIC_KEY);
      if (!stripe) throw new Error("Failed to load Stripe");

      // Open checkout in new tab
      const { error } = await stripe.redirectToCheckout({
        sessionId: data.session_id
      });

      if (error) {
        console.error("Failed to redirect to checkout:", error);
      }
    } catch (error) {
      console.error("Error creating checkout session:", error);
    }
  };

  const handleSignOut = async () => {
    try {
      await firebaseAuth.signOut();
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="w-[80%] max-w-md rounded-xl mx-auto">
        <DialogHeader>
          <DialogTitle>Profile</DialogTitle>
        </DialogHeader>
        <div className="flex flex-col items-center gap-6 p-4">
          <Avatar className="h-24 w-24">
            {user.photoURL ? (
              <AvatarImage src={user.photoURL} alt={user.displayName || "User"} />
            ) : (
              <AvatarFallback>{user.email?.[0].toUpperCase()}</AvatarFallback>
            )}
          </Avatar>
          <div className="text-center space-y-2">
            {user.displayName && (
              <h3 className="text-lg font-semibold">{user.displayName}</h3>
            )}
            <p className="text-sm text-muted-foreground">{user.email}</p>
            {userProfile?.subscriptionTier === "monthly" ? (
              <Badge variant="outline" className="text-green-500 border-green-500">
                Active
              </Badge>
            ) : (
              <Badge 
                variant="outline" 
                className="text-red-500 border-red-500 cursor-pointer hover:bg-red-50 dark:hover:bg-red-950/50 transition-colors"
                onClick={() => handlePurchase(PRICE_IDS.MONTHLY)}
              >
                Subscribe Here
              </Badge>
            )}
          </div>
          <div className="flex items-center justify-center gap-2 text-lg font-medium">
            <CoinsIcon className="h-5 w-5 text-yellow-500" />
            <span>{isLoadingProfile ? "..." : userProfile?.credits || 0} credits</span>
          </div>
          <div className="w-full grid grid-cols-3 gap-3">
            <Button
              variant="outline"
              className="flex flex-col items-center justify-center p-4 h-auto border-2 border-blue-500/20 hover:border-blue-500 hover:bg-blue-500/10 transition-all duration-200 hover:scale-105 dark:hover:text-white"
              onClick={() => handlePurchase(PRICE_IDS.TOKENS_500)}
            >
              <div className="font-semibold">500</div>
              <div className="text-sm text-muted-foreground">tokens</div>
              <div className="text-sm font-medium mt-2">$25</div>
            </Button>
            <Button
              variant="outline"
              className="flex flex-col items-center justify-center p-4 h-auto border-2 border-purple-500/20 hover:border-purple-500 hover:bg-purple-500/10 transition-all duration-200 hover:scale-105 dark:hover:text-white"
              onClick={() => handlePurchase(PRICE_IDS.TOKENS_1250)}
            >
              <div className="font-semibold">1250</div>
              <div className="text-sm text-muted-foreground">tokens</div>
              <div className="text-sm font-medium mt-2">$50</div>
            </Button>
            <Button
              variant="outline"
              className="flex flex-col items-center justify-center p-4 h-auto border-2 border-green-500/20 hover:border-green-500 hover:bg-green-500/10 transition-all duration-200 hover:scale-105 dark:hover:text-white"
              onClick={() => handlePurchase(PRICE_IDS.TOKENS_2500)}
            >
              <div className="font-semibold">2500</div>
              <div className="text-sm text-muted-foreground">tokens</div>
              <div className="text-sm font-medium mt-2">$100</div>
            </Button>
          </div>
          <Button
            variant="outline"
            className="w-full"
            onClick={handleSignOut}
          >
            <LogOutIcon className="mr-2 h-4 w-4" />
            Sign Out
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}


================================================
File: frontend/src/constants/default-theme.ts
================================================
export const DEFAULT_THEME = "dark";

================================================
File: frontend/src/extensions/shadcn/components/accordion.tsx
================================================
import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDownIcon } from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };


================================================
File: frontend/src/extensions/shadcn/components/alert-dialog.tsx
================================================
import * as React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className,
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};


================================================
File: frontend/src/extensions/shadcn/components/alert.tsx
================================================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };


================================================
File: frontend/src/extensions/shadcn/components/aspect-ratio.tsx
================================================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio";

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };


================================================
File: frontend/src/extensions/shadcn/components/avatar.tsx
================================================
import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };


================================================
File: frontend/src/extensions/shadcn/components/badge.tsx
================================================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };


================================================
File: frontend/src/extensions/shadcn/components/breadcrumb.tsx
================================================
import * as React from "react";
import { ChevronRightIcon, DotsHorizontalIcon } from "@radix-ui/react-icons";
import { Slot } from "@radix-ui/react-slot";

import { cn } from "@/lib/utils";

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = "Breadcrumb";

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className,
    )}
    {...props}
  />
));
BreadcrumbList.displayName = "BreadcrumbList";

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
));
BreadcrumbItem.displayName = "BreadcrumbItem";

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = "BreadcrumbLink";

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
));
BreadcrumbPage.displayName = "BreadcrumbPage";

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRightIcon />}
  </li>
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <DotsHorizontalIcon className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};


================================================
File: frontend/src/extensions/shadcn/components/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };


================================================
File: frontend/src/extensions/shadcn/components/calendar.tsx
================================================
import * as React from "react";
import { ChevronLeftIcon, ChevronRightIcon } from "@radix-ui/react-icons";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md",
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100",
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50  aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeftIcon className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRightIcon className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };


================================================
File: frontend/src/extensions/shadcn/components/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};


================================================
File: frontend/src/extensions/shadcn/components/carousel.tsx
================================================
import * as React from "react";
import { ArrowLeftIcon, ArrowRightIcon } from "@radix-ui/react-icons";
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: "horizontal" | "vertical";
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins,
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext],
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  },
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className,
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className,
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className,
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeftIcon className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
});
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel();

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className,
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRightIcon className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
});
CarouselNext.displayName = "CarouselNext";

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};


================================================
File: frontend/src/extensions/shadcn/components/chart.tsx
================================================
import * as React from "react";
import * as RechartsPrimitive from "recharts";
import {
  NameType,
  Payload,
  ValueType,
} from "recharts/types/component/DefaultTooltipContent";

import { cn } from "@/lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig;
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className,
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color,
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`,
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: "line" | "dot" | "dashed";
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref,
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className,
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center",
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            },
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center",
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  },
);
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref,
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className,
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground",
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  },
);
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string,
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string;
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};


================================================
File: frontend/src/extensions/shadcn/components/checkbox.tsx
================================================
import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { CheckIcon } from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <CheckIcon className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };


================================================
File: frontend/src/extensions/shadcn/components/collapsible.tsx
================================================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };


================================================
File: frontend/src/extensions/shadcn/components/command.tsx
================================================
import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { MagnifyingGlassIcon } from "@radix-ui/react-icons";
import { Command as CommandPrimitive } from "cmdk";

import { cn } from "@/lib/utils";
import { Dialog, DialogContent } from "@/components/ui/dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <MagnifyingGlassIcon className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className,
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};


================================================
File: frontend/src/extensions/shadcn/components/context-menu.tsx
================================================
import * as React from "react";
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
ContextMenuShortcut.displayName = "ContextMenuShortcut";

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};


================================================
File: frontend/src/extensions/shadcn/components/dialog.tsx
================================================
import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};


================================================
File: frontend/src/extensions/shadcn/components/drawer.tsx
================================================
import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@/lib/utils";

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className,
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};


================================================
File: frontend/src/extensions/shadcn/components/dropdown-menu.tsx
================================================
import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};


================================================
File: frontend/src/extensions/shadcn/components/form.tsx
================================================
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};


================================================
File: frontend/src/extensions/shadcn/components/hover-card.tsx
================================================
import * as React from "react";
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";

import { cn } from "@/lib/utils";

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };


================================================
File: frontend/src/extensions/shadcn/components/input-otp.tsx
================================================
import * as React from "react";
import { DashIcon } from "@radix-ui/react-icons";
import { OTPInput, OTPInputContext } from "input-otp";

import { cn } from "@/lib/utils";

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName,
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
));
InputOTP.displayName = "InputOTP";

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
));
InputOTPGroup.displayName = "InputOTPGroup";

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-1 ring-ring",
        className,
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = "InputOTPSlot";

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <DashIcon />
  </div>
));
InputOTPSeparator.displayName = "InputOTPSeparator";

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };


================================================
File: frontend/src/extensions/shadcn/components/input.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };


================================================
File: frontend/src/extensions/shadcn/components/label.tsx
================================================
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };


================================================
File: frontend/src/extensions/shadcn/components/menubar.tsx
================================================
import * as React from "react";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";
import * as MenubarPrimitive from "@radix-ui/react-menubar";

import { cn } from "@/lib/utils";

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className,
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className,
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref,
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className,
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  ),
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
MenubarShortcut.displayname = "MenubarShortcut";

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};


================================================
File: frontend/src/extensions/shadcn/components/navigation-menu.tsx
================================================
import * as React from "react";
import { ChevronDownIcon } from "@radix-ui/react-icons";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils";

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className,
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className,
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50",
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDownIcon
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className,
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className,
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};


================================================
File: frontend/src/extensions/shadcn/components/pagination.tsx
================================================
import * as React from "react";
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  DotsHorizontalIcon,
} from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";
import { ButtonProps, buttonVariants } from "@/components/ui/button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className,
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeftIcon className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRightIcon className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <DotsHorizontalIcon className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
};


================================================
File: frontend/src/extensions/shadcn/components/popover.tsx
================================================
import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverAnchor = PopoverPrimitive.Anchor;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };


================================================
File: frontend/src/extensions/shadcn/components/progress.tsx
================================================
import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "@/lib/utils";

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className,
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };


================================================
File: frontend/src/extensions/shadcn/components/radio-group.tsx
================================================
import * as React from "react";
import { CheckIcon } from "@radix-ui/react-icons";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";

import { cn } from "@/lib/utils";

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <CheckIcon className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };


================================================
File: frontend/src/extensions/shadcn/components/resizable.tsx
================================================
import { DragHandleDots2Icon } from "@radix-ui/react-icons";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className,
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <DragHandleDots2Icon className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };


================================================
File: frontend/src/extensions/shadcn/components/scroll-area.tsx
================================================
import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };


================================================
File: frontend/src/extensions/shadcn/components/select.tsx
================================================
import * as React from "react";
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@radix-ui/react-icons";
import * as SelectPrimitive from "@radix-ui/react-select";

import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};


================================================
File: frontend/src/extensions/shadcn/components/separator.tsx
================================================
import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref,
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className,
      )}
      {...props}
    />
  ),
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };


================================================
File: frontend/src/extensions/shadcn/components/sheet.tsx
================================================
import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};


================================================
File: frontend/src/extensions/shadcn/components/skeleton.tsx
================================================
import { cn } from "@/lib/utils";

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  );
}

export { Skeleton };


================================================
File: frontend/src/extensions/shadcn/components/slider.tsx
================================================
import * as React from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";

import { cn } from "@/lib/utils";

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className,
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };


================================================
File: frontend/src/extensions/shadcn/components/sonner.tsx
================================================
import { useTheme } from "next-themes";
import { Toaster as Sonner } from "sonner";

type ToasterProps = React.ComponentProps<typeof Sonner>;

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  );
};

export { Toaster };


================================================
File: frontend/src/extensions/shadcn/components/switch.tsx
================================================
import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };


================================================
File: frontend/src/extensions/shadcn/components/table.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
));
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className,
    )}
    {...props}
  />
));
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className,
    )}
    {...props}
  />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className,
    )}
    {...props}
  />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className,
    )}
    {...props}
  />
));
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
));
TableCaption.displayName = "TableCaption";

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};


================================================
File: frontend/src/extensions/shadcn/components/tabs.tsx
================================================
import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };


================================================
File: frontend/src/extensions/shadcn/components/textarea.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Textarea.displayName = "Textarea";

export { Textarea };


================================================
File: frontend/src/extensions/shadcn/components/toast.tsx
================================================
import * as React from "react";
import { Cross2Icon } from "@radix-ui/react-icons";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className,
    )}
    toast-close=""
    {...props}
  >
    <Cross2Icon className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};


================================================
File: frontend/src/extensions/shadcn/components/toaster.tsx
================================================
import { useToast } from "@/hooks/use-toast";
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast";

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}


================================================
File: frontend/src/extensions/shadcn/components/toggle-group.tsx
================================================
import * as React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";
import { toggleVariants } from "@/components/ui/toggle";

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className,
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };


================================================
File: frontend/src/extensions/shadcn/components/toggle.tsx
================================================
import * as React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-3",
        sm: "h-8 px-2",
        lg: "h-10 px-3",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };


================================================
File: frontend/src/extensions/shadcn/components/tooltip.tsx
================================================
import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };


================================================
File: frontend/src/extensions/shadcn/hooks/use-theme.ts
================================================
import { useContext } from "react";
import { ThemeProviderContext } from "@/internal-components/ThemeProvider";

export const useTheme = () => {
  const context = useContext(ThemeProviderContext);

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider");

  return context;
};


================================================
File: frontend/src/extensions/shadcn/hooks/use-toast.ts
================================================
import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };


================================================
File: frontend/src/internal-components/Head.tsx
================================================
import { Helmet } from "react-helmet";
import fonts from "../fonts.json";

export const Head = () => {
  return (
    <Helmet>
      {fonts.map((font) => (
        <link key={font} href={font} rel="stylesheet" />
      ))}
    </Helmet>
  );
};


================================================
File: frontend/src/internal-components/ThemeProvider.tsx
================================================
import { createContext, useContext, useEffect, useState } from "react";

type Theme = "dark" | "light" | "system";

type ThemeProviderProps = {
  children: React.ReactNode;
  defaultTheme?: Theme;
  storageKey?: string;
};

type ThemeProviderState = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
};

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
};

export const ThemeProviderContext =
  createContext<ThemeProviderState>(initialState);

declare const __APP_ID__: string;

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = `databutton-${__APP_ID__}-ui-theme`,
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme,
  );

  useEffect(() => {
    const root = window.document.documentElement;

    root.classList.remove("light", "dark");

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light";

      root.classList.add(systemTheme);
      return;
    }

    root.classList.add(theme);
  }, [theme]);

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme);
      setTheme(theme);
    },
  };

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  );
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext);

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider");

  return context;
};


================================================
File: frontend/src/lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}


================================================
File: frontend/src/pages/App.tsx
================================================
import { SearchBar } from "@/components/SearchBar";
import { PropertyDialog } from "@/components/PropertyDialog";
import { PropertyCard } from "@/components/PropertyCard";
import brain from "brain";
import { toast, Toaster } from "sonner";
import { useState, useEffect, useRef } from "react";
import { createUserProfile, getUserProfile } from "@/utils/firebase";
import { useUserGuardContext } from "app";
import { useSearchParams } from "react-router-dom";
import { getDoc, doc } from "firebase/firestore";
import { db } from "@/utils/firebase";
import { getSavedQueries, savePropertyQuery, deleteSavedQuery } from "@/utils/firebase";
import { Button } from "@/components/ui/button";
import { ListIcon, MapIcon, SatelliteIcon, UserIcon } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useAppStore } from "@/utils/store";
import { MapView } from "@/components/Map";
import { UserDialog } from "@/components/UserDialog";

export default function App() {
  const mapRef = useRef<mapboxgl.Map>();
  const { user } = useUserGuardContext();
  const [searchParams] = useSearchParams();

  // Check and create user profile if needed
  useEffect(() => {
    const checkProfile = async () => {
      try {
        const profile = await getUserProfile(user.uid);
        console.log("Profile exists?", !!profile);
        if (!profile) {
          console.log("Creating new profile for user:", user.uid);
          await createUserProfile(user);
        }
      } catch (error) {
        console.error("Error checking/creating user profile:", error);
      }
    };
    
    checkProfile();
  }, [user]);

  const { selectedProperty, setSelectedProperty, savedProperties, setSavedProperties, isPropertyCardVisible, setPropertyCardVisible, mapStyle, setMapStyle, setShouldCenterMap } = useAppStore();
  const isStyleLoading = useAppStore(state => state.isStyleLoading);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [userDialogOpen, setUserDialogOpen] = useState(false);

  // Fetch property from Firestore if id is in URL
  useEffect(() => {
    const queryId = searchParams.get('id');
    if (!queryId) return;

    const fetchProperty = async () => {
      try {
        const docRef = doc(db, 'queries', queryId);
        const docSnap = await getDoc(docRef);
        
        if (docSnap.exists()) {
          const data = docSnap.data();
if (data && data.address && data.zpid) {
            setSelectedProperty(data);
          }
          setShouldCenterMap(true);
          setDialogOpen(true); // Open the PropertyDialog
        } else {
          console.log('No property found with this ID');
        }
      } catch (error) {
        console.error('Error fetching property:', error);
      }
    };

    fetchProperty();
  }, [searchParams, setSelectedProperty, setShouldCenterMap, setDialogOpen]);

  // Load saved properties whenever selectedProperty changes
  // Show property card whenever a property is selected
  useEffect(() => {
    if (selectedProperty) {
      setPropertyCardVisible(true);
    }
  }, [selectedProperty, setPropertyCardVisible]);

  useEffect(() => {
    const fetchSavedProperties = async () => {
      try {
        const queries = await getSavedQueries(user.uid);
        setSavedProperties(queries);
      } catch (error) {
        console.error('Error loading saved properties:', error);
      }
    };

    fetchSavedProperties();
  }, [user.uid, selectedProperty, setSavedProperties]);
  
  // Add event listener for opening user dialog from PropertyCard
  useEffect(() => {
    const handleOpenUserDialog = () => {
      setUserDialogOpen(true);
    };
    
    window.addEventListener("open-user-dialog", handleOpenUserDialog);
    
    return () => {
      window.removeEventListener("open-user-dialog", handleOpenUserDialog);
    };
  }, []);

  return (
    <div className="flex flex-col w-full h-screen bg-background overflow-hidden app-container">
      {/* Toaster for notifications */}
      <Toaster position="top-center" richColors />
      
      {/* Map Container */}
      <div className="flex-1 relative">
        <MapView mapRef={mapRef} />
      </div>

      {/* Floating Controls */}
      <div className="absolute w-[90%] max-w-2xl top-4 left-1/2 -translate-x-1/2 flex items-start gap-2">
        <SearchBar mapRef={mapRef} />
        <Button
          variant="ghost"
          size="icon"
          className="bg-background backdrop-blur-sm border shadow-sm rounded-full w-12 h-10 p-0"
          disabled={isStyleLoading}
          onClick={() => setMapStyle(prev => prev === "custom" ? "satellite" : "custom")}
        >
          {mapStyle === "custom" ? (
            <SatelliteIcon className="h-4 w-4" />
          ) : (
            <MapIcon className="h-4 w-4" />
          )}
        </Button>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="bg-background backdrop-blur-sm border shadow-sm rounded-full w-12 h-10 p-0 relative z-50"
              title="Saved Properties"
            >
              <ListIcon className="w-4 h-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-[300px] max-h-[60vh] overflow-y-auto">

            {savedProperties?.length === 0 ? (
              <div className="p-4 text-sm text-muted-foreground text-center">
                No saved properties
              </div>
            ) : (
              savedProperties?.map((property) => (
                <DropdownMenuItem
                  key={property.zpid}
                  className="cursor-pointer"
                  onClick={() => {
                    setSelectedProperty(property);
                    // Always pan to location when selecting from saved properties
                    setShouldCenterMap(true);
                  }}
                >
                  {property.address.streetAddress}, {property.address.city}, {property.address.state}
                </DropdownMenuItem>
              ))
            )}
          </DropdownMenuContent>
        </DropdownMenu>
        <Button
          variant="ghost"
          size="icon"
          className="bg-background backdrop-blur-sm border shadow-sm rounded-full w-12 h-10 p-0 relative z-50"
          title="Profile"
          onClick={() => setUserDialogOpen(true)}
        >
          <UserIcon className="w-4 h-4" />
        </Button>
      </div>

      {/* Property Info Card */}
      {isPropertyCardVisible && <div className="absolute bottom-4 left-1/2 pl-8 -translate-x-1/2 w-[90%] max-w-2xl">
        <PropertyCard
          onViewMore={() => setDialogOpen(true)}
        />
      </div>}

      {selectedProperty && (
        <PropertyDialog
          open={dialogOpen}
          onOpenChange={setDialogOpen}
        />
      )}

      <UserDialog
        open={userDialogOpen}
        onOpenChange={setUserDialogOpen}
      />
    </div>
  );
}


================================================
File: frontend/src/pages/Login.tsx
================================================
import { SignInOrUpForm } from "app"
import { createUserProfile, getUserProfile } from "@/utils/firebase"
import { User } from "firebase/auth"
import { useEffect } from "react"
import { firebaseAuth } from "app"

export default function Login() {
  useEffect(() => {
    const unsubscribe = firebaseAuth.onAuthStateChanged(async (user) => {
      if (user) {
        console.log("Auth state changed - user signed in:", user.uid);
        try {
          console.log("Checking if profile exists for user:", user.uid);
          const profile = await getUserProfile(user.uid);
          console.log("Profile exists?", !!profile);
          if (!profile) {
            console.log("Creating new profile for user:", user.uid);
            await createUserProfile(user);
          }
        } catch (error) {
          console.error("Error checking/creating user profile:", error);
        }
      } else {
        console.log("Auth state changed - user signed out");
      }
    });

    return () => unsubscribe();
  }, []);

  return (
    <div className="min-h-screen flex flex-col items-center justify-center p-4 bg-zinc-900">
      <div className="w-full max-w-md space-y-8 p-8">
        <div className="text-center space-y-2">
          <h1 className="text-4xl font-bold tracking-tight text-white">Welcome to Landhacker</h1>
          <p className="text-lg text-zinc-400">Sign in to continue your journey</p>
        </div>
        <SignInOrUpForm signInOptions={{ google: true }} />
      </div>
    </div>
  );
};

================================================
File: frontend/src/pages/Logout.tsx
================================================
import { auth } from "app";
import { useEffect } from "react";

export default function Logout() {
  useEffect(() => {
    auth.signOut();
  }, []);

  return null;
}

================================================
File: frontend/src/pages/NotFoundPage.tsx
================================================
import { ProdErrorPage } from "../prod-components/ProdErrorPage";

export default function NotFoundPage() {
  return <ProdErrorPage text="Page not found." canRefresh={false} />;
}


================================================
File: frontend/src/pages/SomethingWentWrongPage.tsx
================================================
import { ProdErrorPage } from "../prod-components/ProdErrorPage";

export default function SomethingWentWrongPage() {
  return <ProdErrorPage text="Something went wrong." canRefresh={true} />;
}


================================================
File: frontend/src/pages/brain.ts
================================================
// Tmp file that makes apps backwards compatible to
// the point before we moved App into pages
import brain from "../brain";

export default brain;


================================================
File: frontend/src/prod-components/ProdAppWrapper.tsx
================================================
import { Outlet } from "react-router";

/**
 * Just a wrapper for the app. This is used in production mode.
 * This is required because we need to use the react-router <Outlet /> component
 * to make this work nice with the dev mode.
 */
export default function ProdAppWrapper() {
  return <Outlet />;
}


================================================
File: frontend/src/prod-components/ProdErrorPage.tsx
================================================
import type { ReactNode } from "react";

interface Props {
  text: ReactNode;
  canRefresh: boolean;
}

export const ProdErrorPage = ({ text, canRefresh }: Props) => {
  return (
    <div
      style={{
        display: "flex",
        flexFlow: "column",
        gap: "20px",
        padding: "20px",
      }}
    >
      {text}

      <div
        style={{
          display: "flex",
          gap: "10px",
        }}
      >
        {canRefresh && (
          <button
            style={{
              color: "blue",
              width: "fit-content",
            }}
            type="button"
            onClick={() => {
              window.location.reload();
            }}
          >
            Reload page
          </button>
        )}
      </div>
    </div>
  );
};


================================================
File: frontend/src/prod-components/SuspenseWrapper.tsx
================================================
import { type ReactNode, Suspense } from "react";

export const SuspenseWrapper = ({ children }: { children: ReactNode }) => {
  return <Suspense>{children}</Suspense>;
};


================================================
File: frontend/src/utils/cn.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}


================================================
File: frontend/src/utils/firebase.ts
================================================
import { firebaseApp } from "app";
import { collection, addDoc, getDocs, getFirestore, query, where, deleteDoc, doc, setDoc, getDoc, onSnapshot } from "firebase/firestore";
import { User } from "firebase/auth";
import type { PropertyDetailsResponse } from "types";

export const db = getFirestore(firebaseApp);

export interface UserProfile {
  uid: string;
  email: string;
  displayName: string | null;
  photoURL: string | null;
  createdAt: Date;
  lastLoginAt: Date;
  credits: number;
  stripeCustomerId?: string;
  subscriptionStatus?: 'active' | 'cancelled_active' | 'expired' | null;
  subscriptionTier?: 'monthly' | null;
}

export const createUserProfile = async (user: User) => {
  try {
    const userProfile: UserProfile = {
      uid: user.uid,
      email: user.email!,
      displayName: user.displayName,
      photoURL: user.photoURL,
      createdAt: new Date(),
      lastLoginAt: new Date(),
      credits: 0, // Initial credit
      stripeCustomerId: null,
      subscriptionStatus: null,
      subscriptionTier: null,
    };

    const x = await setDoc(doc(db, "users", user.uid), userProfile);
    return userProfile;
  } catch (error) {
    console.error("Error creating user profile:", error);
    throw error;
  }
};

export interface SavedQuery extends PropertyDetailsResponse {
  id?: string;
  userId: string;
  savedAt: Date;
}

// Replace undefined values with null recursively
const replaceUndefinedWithNull = (obj: any): any => {
  const clean: any = {};
  
  Object.entries(obj).forEach(([key, value]) => {
    if (value === undefined) {
      clean[key] = null;
      return;
    }
    
    if (value && typeof value === 'object' && !Array.isArray(value)) {
      clean[key] = replaceUndefinedWithNull(value);
    } else if (Array.isArray(value)) {
      clean[key] = value.map(item => 
        item && typeof item === 'object' ? replaceUndefinedWithNull(item) : (item === undefined ? null : item)
      );
    } else {
      clean[key] = value;
    }
  });
  
  return clean;
};

export const savePropertyQuery = async (userId: string, property: PropertyDetailsResponse) => {
  try {
    // Replace undefined values with null in the property object
    const cleanProperty = replaceUndefinedWithNull(property);
    
    const queryData = {
      userId,
      savedAt: new Date(),
      ...cleanProperty,
    };

    // Check if a document with this zpid already exists for this user
    const q = query(
      collection(db, "queries"), 
      where("userId", "==", userId),
      where("zpid", "==", property.zpid)
    );
    const querySnapshot = await getDocs(q);
    
    let docId;
    if (!querySnapshot.empty) {
      // Update existing document
      docId = querySnapshot.docs[0].id;
      await setDoc(doc(db, "queries", docId), queryData);
    } else {
      // Create new document
      const docRef = await addDoc(collection(db, "queries"), queryData);
      docId = docRef.id;
    }
    
    return docId;
  } catch (error) {
    console.error("Error saving property query:", error);
    throw error;
  }
};

export const getSavedQueries = async (userId: string) => {
  try {
    const q = query(collection(db, "queries"), where("userId", "==", userId));
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(doc => {
      const data = doc.data();
      return {
        id: doc.id,
        ...data,
      } as SavedQuery;
    });
  } catch (error) {
    console.error("Error getting saved queries:", error);
    throw error;
  }
};

export const getUserProfile = async (userId: string): Promise<UserProfile | null> => {
  try {
    const docRef = doc(db, "users", userId);
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      return docSnap.data() as UserProfile;
    }
    return null;
  } catch (error) {
    console.error("Error getting user profile:", error);
    throw error;
  }
};

export const decreaseCredits = async (userId: string, amount: number = 50): Promise<void> => {
  try {
    const userRef = doc(db, "users", userId);
    const userSnap = await getDoc(userRef);
    if (!userSnap.exists()) {
      throw new Error("User profile not found");
    }
    const userData = userSnap.data() as UserProfile;
    if (userData.credits < amount) {
      throw new Error("Insufficient credits");
    }
    await setDoc(userRef, {
      ...userData,
      credits: userData.credits - amount,
    });
  } catch (error) {
    console.error("Error decreasing credits:", error);
    throw error;
  }
};

export const deleteSavedQuery = async (queryId: string) => {
  try {
    await deleteDoc(doc(db, "queries", queryId));
  } catch (error) {
    console.error("Error deleting saved query:", error);
    throw error;
  }
};


================================================
File: frontend/src/utils/queue.ts
================================================
import { create } from 'zustand';
import { FirecrawlPrice, PropertyDetailsResponse } from 'types';

export type JobStatus = 'queued' | 'fetching-prices' | 'predicting' | 'completed' | 'error';

export interface PriceJob {
  id: string;
  property: PropertyDetailsResponse;
  status: JobStatus;
  error?: string;
  priceEstimates?: FirecrawlPrice[];
  predictedPrice?: {
    predicted_price: string;
    confidence_score: string;
    reasoning: string;
  };
  createdAt: number;
}

interface QueueState {
  jobs: PriceJob[];
  maxJobs: number;
  isProcessing: boolean;
  // Actions
  addJob: (property: PropertyDetailsResponse) => Promise<void>;
  removeJob: (id: string) => void;
  updateJob: (id: string, updates: Partial<PriceJob>) => void;
  clearCompletedJobs: () => void;
  // Getters
  getJobById: (id: string) => PriceJob | undefined;
  getJobByProperty: (property: PropertyDetailsResponse) => PriceJob | undefined;
}

export const useQueueStore = create<QueueState>((set, get) => ({
  jobs: [],
  maxJobs: 3,
  isProcessing: false,

  addJob: async (property) => {
    const state = get();
    
    // Check if property is already in queue
    const existingJob = state.getJobByProperty(property);
    if (existingJob) return;

    // Check if queue is full
    if (state.jobs.length >= state.maxJobs) {
      throw new Error('Queue is full. Please wait for current jobs to complete.');
    }

    // Add new job
    const newJob: PriceJob = {
      id: Math.random().toString(36).substring(7),
      property,
      status: 'queued',
      createdAt: Date.now()
    };

    set(state => ({
      jobs: [...state.jobs, newJob]
    }));
  },

  removeJob: (id) => {
    set(state => ({
      jobs: state.jobs.filter(job => job.id !== id)
    }));
  },

  updateJob: (id, updates) => {
    set(state => ({
      jobs: state.jobs.map(job =>
        job.id === id ? { ...job, ...updates } : job
      )
    }));
  },

  clearCompletedJobs: () => {
    set(state => ({
      jobs: state.jobs.filter(job =>
        job.status !== 'completed' && job.status !== 'error'
      )
    }));
  },

  getJobById: (id) => {
    return get().jobs.find(job => job.id === id);
  },

  getJobByProperty: (property) => {
    return get().jobs.find(job => 
      job.property.address?.streetAddress === property.address?.streetAddress &&
      job.property.address?.city === property.address?.city &&
      job.property.address?.state === property.address?.state
    );
  }
}));


================================================
File: frontend/src/utils/store.tsx
================================================
import { create } from 'zustand'
import type { PropertyDetailsResponse } from 'types'
import { doc, onSnapshot, getFirestore } from "firebase/firestore";
import { firebaseApp } from "app";
import type { UserProfile } from "./firebase";

type MeasurementMode = 'none' | 'distance' | 'area';
type MeasurementUnits = 'metric' | 'imperial';

interface Measurement {
  id: string;
  type: 'distance' | 'area';
  value: number;
  coordinates: number[][];
}

interface AppState {
  // User Profile State
  userProfile: UserProfile | null
  isLoadingProfile: boolean
  profileError: Error | null
  initializeUserProfileListener: (userId: string) => () => void
  clearUserProfile: () => void
  
  isStyleLoading: boolean
  setIsStyleLoading: (isLoading: boolean) => void
  mapStyle: "custom" | "satellite"
  setMapStyle: (style: "custom" | "satellite" | ((prev: "custom" | "satellite") => "custom" | "satellite")) => void
  isPropertyCardVisible: boolean
  setPropertyCardVisible: (visible: boolean) => void
  selectedProperty: PropertyDetailsResponse | null
  setSelectedProperty: (property: PropertyDetailsResponse | null) => void
  isLoadingProperty: boolean
  setIsLoadingProperty: (isLoading: boolean) => void
  savedProperties: PropertyDetailsResponse[]
  setSavedProperties: (properties: PropertyDetailsResponse[]) => void
  shouldCenterMap: boolean
  setShouldCenterMap: (shouldCenter: boolean) => void
  // Measurement state
  measurementMode: MeasurementMode
  setMeasurementMode: (mode: MeasurementMode) => void
  measurementUnits: MeasurementUnits
  setMeasurementUnits: (units: MeasurementUnits) => void
  measurements: Measurement[]
  setMeasurements: (measurements: Measurement[]) => void
  addMeasurement: (measurement: Measurement) => void
  removeMeasurement: (id: string) => void
  clearMeasurements: () => void
  // New measurement states for drag-based interaction
  measurementPoints: [number, number][]
  currentMeasurement: number | null
  viewportCenter: [number, number]
  addMeasurementPoint: (point: [number, number]) => void
  setCurrentMeasurement: (measurement: number | null) => void
  setViewportCenter: (center: [number, number]) => void
  // Price generation state
  runningProperties: string[]
  addRunningProperty: (address: string) => void
  removeRunningProperty: (address: string) => void
}

export const useAppStore = create<AppState>((set) => ({
  // Price generation state
  runningProperties: [],
  addRunningProperty: (address) => set((state) => ({
    runningProperties: [...state.runningProperties, address]
  })),
  removeRunningProperty: (address) => set((state) => ({
    runningProperties: state.runningProperties.filter((a) => a !== address)
  })),
  // User Profile State
  userProfile: null,
  isLoadingProfile: false,
  profileError: null,
  initializeUserProfileListener: (userId: string) => {
    set({ isLoadingProfile: true });
    const db = getFirestore(firebaseApp);
    
    const unsubscribe = onSnapshot(
      doc(db, "users", userId),
      (doc) => {
        if (doc.exists()) {
          set({ 
            userProfile: doc.data() as UserProfile,
            isLoadingProfile: false,
            profileError: null
          });
        } else {
          set({ 
            userProfile: null,
            isLoadingProfile: false,
            profileError: new Error("User profile not found")
          });
        }
      },
      (error) => {
        console.error("Error listening to user profile:", error);
        set({ 
          isLoadingProfile: false,
          profileError: error as Error
        });
      }
    );

    return unsubscribe;
  },
  clearUserProfile: () => set({ 
    userProfile: null,
    isLoadingProfile: false,
    profileError: null
  }),
  
  isStyleLoading: true,
  setIsStyleLoading: (isLoading) => set({ isStyleLoading: isLoading }),
  isPropertyCardVisible: true,
  setPropertyCardVisible: (visible) => set((state) => ({ 
    isPropertyCardVisible: visible,
    // Close measurement mode when property card is opened
    measurementMode: visible ? 'none' : state.measurementMode,
    // Clear measurements when property card is opened
    measurements: visible ? [] : state.measurements
  })),
  selectedProperty: null,
  setSelectedProperty: (property) => set({ selectedProperty: property }),
  isLoadingProperty: false,
  setIsLoadingProperty: (isLoading) => set({ isLoadingProperty: isLoading }),
  savedProperties: [],
  setSavedProperties: (properties) => set({ savedProperties: properties }),
  mapStyle: "custom",
  setMapStyle: (style) => set((state) => ({ 
    mapStyle: typeof style === "function" ? style(state.mapStyle) : style 
  })),
  shouldCenterMap: false,
  setShouldCenterMap: (shouldCenter) => set({ shouldCenterMap: shouldCenter }),
  // Measurement state initialization
  measurementMode: 'none',
  setMeasurementMode: (mode) => set((state) => ({ 
    measurementMode: mode,
    // Close property card when measurement mode is active
    isPropertyCardVisible: mode === 'none' ? state.isPropertyCardVisible : false,
    // Only clear points when exiting measurement mode
    measurementPoints: mode === 'none' ? [] : state.measurementPoints,
    // Recalculate measurement in useEffect
    currentMeasurement: null,
    selectedProperty: mode === 'none' ? state.selectedProperty : null
  })),
  measurementUnits: 'metric',
  setMeasurementUnits: (units) => set({ measurementUnits: units }),
  measurements: [],
  setMeasurements: (measurements) => set({ measurements }),
  addMeasurement: (measurement) => set((state) => ({
    measurements: [...state.measurements, measurement]
  })),
  removeMeasurement: (id) => set((state) => ({
    measurements: state.measurements.filter((m) => m.id !== id)
  })),
  clearMeasurements: () => set({ 
    measurements: [],
    measurementPoints: [],
    currentMeasurement: null
  }),
  // New measurement states
  measurementPoints: [] as [number, number][], // Initialize as empty array,
  currentMeasurement: null,
  viewportCenter: [-96.7970, 32.7767], // Default center
  addMeasurementPoint: (point) => set((state) => ({ 
    measurementPoints: state.measurementPoints ? [...state.measurementPoints, point] : [point]
  })),
  setCurrentMeasurement: (measurement) => set({ currentMeasurement: measurement }),
  setViewportCenter: (center) => set({ viewportCenter: center }),
}))


